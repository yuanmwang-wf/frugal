/**
 * Autogenerated by Frugal Compiler (2.25.2)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package v1.music;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import javax.annotation.Generated;
import java.util.Arrays;
import java.util.concurrent.*;


@Generated(value = "Autogenerated by Frugal Compiler (2.25.2)")
public class FStore {

	private static final Logger logger = LoggerFactory.getLogger(FStore.class);

	/**
	 * Services are the API for client and server interaction.
	 * Users can buy an album or enter a giveaway for a free album.
	 */
	public interface Iface {

		public Album buyAlbum(FContext ctx, String ASIN, String acct) throws TException, PurchasingError;

		/**
		 * @deprecated use something else
		 */
		@Deprecated
		public boolean enterAlbumGiveaway(FContext ctx, String email, String name) throws TException;

	}

	public static class Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = Arrays.asList(middleware);
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		public Album buyAlbum(FContext ctx, String ASIN, String acct) throws TException, PurchasingError {
			return proxy.buyAlbum(ctx, ASIN, acct);
		}

		@Deprecated
		public boolean enterAlbumGiveaway(FContext ctx, String email, String name) throws TException {
			logger.warn("Call to deprecated function 'Store.enterAlbumGiveaway'");
			return proxy.enterAlbumGiveaway(ctx, email, name);
		}

	}

	private static class InternalClient implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;
		public InternalClient(FServiceProvider provider) {
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		public Album buyAlbum(FContext ctx, String ASIN, String acct) throws TException, PurchasingError {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("buyAlbum", TMessageType.CALL, 0));
			buyAlbum_args args = new buyAlbum_args();
			args.setASIN(ASIN);
			args.setAcct(acct);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("buyAlbum")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "buyAlbum failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "buyAlbum failed: invalid message type");
			}
			buyAlbum_result res = new buyAlbum_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.error != null) {
				throw res.error;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "buyAlbum failed: unknown result");
		}
		public boolean enterAlbumGiveaway(FContext ctx, String email, String name) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("enterAlbumGiveaway", TMessageType.CALL, 0));
			enterAlbumGiveaway_args args = new enterAlbumGiveaway_args();
			args.setEmail(email);
			args.setName(name);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("enterAlbumGiveaway")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "enterAlbumGiveaway failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "enterAlbumGiveaway failed: invalid message type");
			}
			enterAlbumGiveaway_result res = new enterAlbumGiveaway_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "enterAlbumGiveaway failed: unknown result");
		}
	}

	public static class Processor extends FBaseProcessor implements FProcessor {

		private Iface handler;

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}

		protected java.util.Map<String, FProcessorFunction> getProcessMap() {
			java.util.Map<String, FProcessorFunction> processMap = new java.util.HashMap<>();
			processMap.put("buyAlbum", new BuyAlbum());
			processMap.put("enterAlbumGiveaway", new EnterAlbumGiveaway());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = new java.util.HashMap<>();
			java.util.Map<String, String> enterAlbumGiveawayMap = new java.util.HashMap<>();
			enterAlbumGiveawayMap.put("deprecated", "use something else");
			annotationsMap.put("enterAlbumGiveaway", enterAlbumGiveawayMap);
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class BuyAlbum implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				buyAlbum_args args = new buyAlbum_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "buyAlbum", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				buyAlbum_result result = new buyAlbum_result();
				try {
					result.success = handler.buyAlbum(ctx, args.ASIN, args.acct);
					result.setSuccessIsSet(true);
				} catch (PurchasingError error) {
					result.error = error;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("buyAlbum", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "buyAlbum", "Internal error processing buyAlbum: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("buyAlbum", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "buyAlbum", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class EnterAlbumGiveaway implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				logger.warn("Deprecated function 'Store.enterAlbumGiveaway' was called by a client");
				enterAlbumGiveaway_args args = new enterAlbumGiveaway_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "enterAlbumGiveaway", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				enterAlbumGiveaway_result result = new enterAlbumGiveaway_result();
				try {
					result.success = handler.enterAlbumGiveaway(ctx, args.email, args.name);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("enterAlbumGiveaway", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "enterAlbumGiveaway", "Internal error processing enterAlbumGiveaway: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("enterAlbumGiveaway", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "enterAlbumGiveaway", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

	}

	public static class buyAlbum_args implements org.apache.thrift.TBase<buyAlbum_args, buyAlbum_args._Fields>, java.io.Serializable, Cloneable, Comparable<buyAlbum_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyAlbum_args");

		private static final org.apache.thrift.protocol.TField ASIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ASIN", org.apache.thrift.protocol.TType.STRING, (short)1);
		private static final org.apache.thrift.protocol.TField ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("acct", org.apache.thrift.protocol.TType.STRING, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new buyAlbum_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new buyAlbum_argsTupleSchemeFactory());
		}

		public String ASIN;
		public String acct;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ASIN((short)1, "ASIN"),
			ACCT((short)2, "acct")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // ASIN
						return ASIN;
					case 2: // ACCT
						return ACCT;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public buyAlbum_args() {
		}

		public buyAlbum_args(
			String ASIN,
			String acct) {
			this();
			this.ASIN = ASIN;
			this.acct = acct;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public buyAlbum_args(buyAlbum_args other) {
			if (other.isSetASIN()) {
				this.ASIN = other.ASIN;
			}
			if (other.isSetAcct()) {
				this.acct = other.acct;
			}
		}

		public buyAlbum_args deepCopy() {
			return new buyAlbum_args(this);
		}

		@Override
		public void clear() {
			this.ASIN = null;

			this.acct = null;

		}

		public String getASIN() {
			return this.ASIN;
		}

		public buyAlbum_args setASIN(String ASIN) {
			this.ASIN = ASIN;
			return this;
		}

		public void unsetASIN() {
			this.ASIN = null;
		}

		/** Returns true if field ASIN is set (has been assigned a value) and false otherwise */
		public boolean isSetASIN() {
			return this.ASIN != null;
		}

		public void setASINIsSet(boolean value) {
			if (!value) {
				this.ASIN = null;
			}
		}

		public String getAcct() {
			return this.acct;
		}

		public buyAlbum_args setAcct(String acct) {
			this.acct = acct;
			return this;
		}

		public void unsetAcct() {
			this.acct = null;
		}

		/** Returns true if field acct is set (has been assigned a value) and false otherwise */
		public boolean isSetAcct() {
			return this.acct != null;
		}

		public void setAcctIsSet(boolean value) {
			if (!value) {
				this.acct = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ASIN:
				if (value == null) {
					unsetASIN();
				} else {
					setASIN((String)value);
				}
				break;

			case ACCT:
				if (value == null) {
					unsetAcct();
				} else {
					setAcct((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ASIN:
				return getASIN();

			case ACCT:
				return getAcct();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ASIN:
				return isSetASIN();
			case ACCT:
				return isSetAcct();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof buyAlbum_args)
				return this.equals((buyAlbum_args)that);
			return false;
		}

		public boolean equals(buyAlbum_args that) {
			if (that == null)
				return false;

			boolean this_present_ASIN = true && this.isSetASIN();
			boolean that_present_ASIN = true && that.isSetASIN();
			if (this_present_ASIN || that_present_ASIN) {
				if (!(this_present_ASIN && that_present_ASIN))
					return false;
				if (!this.ASIN.equals(that.ASIN))
					return false;
			}

			boolean this_present_acct = true && this.isSetAcct();
			boolean that_present_acct = true && that.isSetAcct();
			if (this_present_acct || that_present_acct) {
				if (!(this_present_acct && that_present_acct))
					return false;
				if (!this.acct.equals(that.acct))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_ASIN = true && (isSetASIN());
			list.add(present_ASIN);
			if (present_ASIN)
				list.add(ASIN);

			boolean present_acct = true && (isSetAcct());
			list.add(present_acct);
			if (present_acct)
				list.add(acct);

			return list.hashCode();
		}

		@Override
		public int compareTo(buyAlbum_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetASIN()).compareTo(other.isSetASIN());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetASIN()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ASIN, other.ASIN);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetAcct()).compareTo(other.isSetAcct());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAcct()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acct, other.acct);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("buyAlbum_args(");
			boolean first = true;

			sb.append("ASIN:");
			if (this.ASIN == null) {
				sb.append("null");
			} else {
				sb.append(this.ASIN);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("acct:");
			if (this.acct == null) {
				sb.append("null");
			} else {
				sb.append(this.acct);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class buyAlbum_argsStandardSchemeFactory implements SchemeFactory {
			public buyAlbum_argsStandardScheme getScheme() {
				return new buyAlbum_argsStandardScheme();
			}
		}

		private static class buyAlbum_argsStandardScheme extends StandardScheme<buyAlbum_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, buyAlbum_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // ASIN
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.ASIN = iprot.readString();
								struct.setASINIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // ACCT
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.acct = iprot.readString();
								struct.setAcctIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, buyAlbum_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.ASIN != null) {
					oprot.writeFieldBegin(ASIN_FIELD_DESC);
					String elem30 = struct.ASIN;
					oprot.writeString(elem30);
					oprot.writeFieldEnd();
				}
				if (struct.acct != null) {
					oprot.writeFieldBegin(ACCT_FIELD_DESC);
					String elem31 = struct.acct;
					oprot.writeString(elem31);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class buyAlbum_argsTupleSchemeFactory implements SchemeFactory {
			public buyAlbum_argsTupleScheme getScheme() {
				return new buyAlbum_argsTupleScheme();
			}
		}

		private static class buyAlbum_argsTupleScheme extends TupleScheme<buyAlbum_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, buyAlbum_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetASIN()) {
					optionals.set(0);
				}
				if (struct.isSetAcct()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetASIN()) {
					String elem32 = struct.ASIN;
					oprot.writeString(elem32);
				}
				if (struct.isSetAcct()) {
					String elem33 = struct.acct;
					oprot.writeString(elem33);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, buyAlbum_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.ASIN = iprot.readString();
					struct.setASINIsSet(true);
				}
				if (incoming.get(1)) {
					struct.acct = iprot.readString();
					struct.setAcctIsSet(true);
				}
			}

		}

	}

	public static class buyAlbum_result implements org.apache.thrift.TBase<buyAlbum_result, buyAlbum_result._Fields>, java.io.Serializable, Cloneable, Comparable<buyAlbum_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buyAlbum_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
		private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new buyAlbum_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new buyAlbum_resultTupleSchemeFactory());
		}

		public Album success;
		public PurchasingError error;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			ERROR((short)1, "error")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // ERROR
						return ERROR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public buyAlbum_result() {
		}

		public buyAlbum_result(
			Album success,
			PurchasingError error) {
			this();
			this.success = success;
			this.error = error;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public buyAlbum_result(buyAlbum_result other) {
			if (other.isSetSuccess()) {
				this.success = new Album(other.success);
			}
			if (other.isSetError()) {
				this.error = new PurchasingError(other.error);
			}
		}

		public buyAlbum_result deepCopy() {
			return new buyAlbum_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.error = null;

		}

		public Album getSuccess() {
			return this.success;
		}

		public buyAlbum_result setSuccess(Album success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public PurchasingError getError() {
			return this.error;
		}

		public buyAlbum_result setError(PurchasingError error) {
			this.error = error;
			return this;
		}

		public void unsetError() {
			this.error = null;
		}

		/** Returns true if field error is set (has been assigned a value) and false otherwise */
		public boolean isSetError() {
			return this.error != null;
		}

		public void setErrorIsSet(boolean value) {
			if (!value) {
				this.error = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Album)value);
				}
				break;

			case ERROR:
				if (value == null) {
					unsetError();
				} else {
					setError((PurchasingError)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERROR:
				return getError();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERROR:
				return isSetError();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof buyAlbum_result)
				return this.equals((buyAlbum_result)that);
			return false;
		}

		public boolean equals(buyAlbum_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_error = true && this.isSetError();
			boolean that_present_error = true && that.isSetError();
			if (this_present_error || that_present_error) {
				if (!(this_present_error && that_present_error))
					return false;
				if (!this.error.equals(that.error))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_error = true && (isSetError());
			list.add(present_error);
			if (present_error)
				list.add(error);

			return list.hashCode();
		}

		@Override
		public int compareTo(buyAlbum_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetError()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("buyAlbum_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("error:");
			if (this.error == null) {
				sb.append("null");
			} else {
				sb.append(this.error);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
			if (error != null) {
				error.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class buyAlbum_resultStandardSchemeFactory implements SchemeFactory {
			public buyAlbum_resultStandardScheme getScheme() {
				return new buyAlbum_resultStandardScheme();
			}
		}

		private static class buyAlbum_resultStandardScheme extends StandardScheme<buyAlbum_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, buyAlbum_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new Album();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // ERROR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.error = new PurchasingError();
								struct.error.read(iprot);
								struct.setErrorIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, buyAlbum_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.error != null) {
					oprot.writeFieldBegin(ERROR_FIELD_DESC);
					struct.error.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class buyAlbum_resultTupleSchemeFactory implements SchemeFactory {
			public buyAlbum_resultTupleScheme getScheme() {
				return new buyAlbum_resultTupleScheme();
			}
		}

		private static class buyAlbum_resultTupleScheme extends TupleScheme<buyAlbum_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, buyAlbum_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetError()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetError()) {
					struct.error.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, buyAlbum_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Album();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.error = new PurchasingError();
					struct.error.read(iprot);
					struct.setErrorIsSet(true);
				}
			}

		}

	}

	public static class enterAlbumGiveaway_args implements org.apache.thrift.TBase<enterAlbumGiveaway_args, enterAlbumGiveaway_args._Fields>, java.io.Serializable, Cloneable, Comparable<enterAlbumGiveaway_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterAlbumGiveaway_args");

		private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new enterAlbumGiveaway_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new enterAlbumGiveaway_argsTupleSchemeFactory());
		}

		public String email;
		public String name;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			EMAIL((short)1, "email"),
			NAME((short)2, "name")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // EMAIL
						return EMAIL;
					case 2: // NAME
						return NAME;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public enterAlbumGiveaway_args() {
		}

		public enterAlbumGiveaway_args(
			String email,
			String name) {
			this();
			this.email = email;
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public enterAlbumGiveaway_args(enterAlbumGiveaway_args other) {
			if (other.isSetEmail()) {
				this.email = other.email;
			}
			if (other.isSetName()) {
				this.name = other.name;
			}
		}

		public enterAlbumGiveaway_args deepCopy() {
			return new enterAlbumGiveaway_args(this);
		}

		@Override
		public void clear() {
			this.email = null;

			this.name = null;

		}

		public String getEmail() {
			return this.email;
		}

		public enterAlbumGiveaway_args setEmail(String email) {
			this.email = email;
			return this;
		}

		public void unsetEmail() {
			this.email = null;
		}

		/** Returns true if field email is set (has been assigned a value) and false otherwise */
		public boolean isSetEmail() {
			return this.email != null;
		}

		public void setEmailIsSet(boolean value) {
			if (!value) {
				this.email = null;
			}
		}

		public String getName() {
			return this.name;
		}

		public enterAlbumGiveaway_args setName(String name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/** Returns true if field name is set (has been assigned a value) and false otherwise */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case EMAIL:
				if (value == null) {
					unsetEmail();
				} else {
					setEmail((String)value);
				}
				break;

			case NAME:
				if (value == null) {
					unsetName();
				} else {
					setName((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case EMAIL:
				return getEmail();

			case NAME:
				return getName();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case EMAIL:
				return isSetEmail();
			case NAME:
				return isSetName();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof enterAlbumGiveaway_args)
				return this.equals((enterAlbumGiveaway_args)that);
			return false;
		}

		public boolean equals(enterAlbumGiveaway_args that) {
			if (that == null)
				return false;

			boolean this_present_email = true && this.isSetEmail();
			boolean that_present_email = true && that.isSetEmail();
			if (this_present_email || that_present_email) {
				if (!(this_present_email && that_present_email))
					return false;
				if (!this.email.equals(that.email))
					return false;
			}

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_email = true && (isSetEmail());
			list.add(present_email);
			if (present_email)
				list.add(email);

			boolean present_name = true && (isSetName());
			list.add(present_name);
			if (present_name)
				list.add(name);

			return list.hashCode();
		}

		@Override
		public int compareTo(enterAlbumGiveaway_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetEmail()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("enterAlbumGiveaway_args(");
			boolean first = true;

			sb.append("email:");
			if (this.email == null) {
				sb.append("null");
			} else {
				sb.append(this.email);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			} else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class enterAlbumGiveaway_argsStandardSchemeFactory implements SchemeFactory {
			public enterAlbumGiveaway_argsStandardScheme getScheme() {
				return new enterAlbumGiveaway_argsStandardScheme();
			}
		}

		private static class enterAlbumGiveaway_argsStandardScheme extends StandardScheme<enterAlbumGiveaway_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, enterAlbumGiveaway_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // EMAIL
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.email = iprot.readString();
								struct.setEmailIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // NAME
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.name = iprot.readString();
								struct.setNameIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, enterAlbumGiveaway_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.email != null) {
					oprot.writeFieldBegin(EMAIL_FIELD_DESC);
					String elem34 = struct.email;
					oprot.writeString(elem34);
					oprot.writeFieldEnd();
				}
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					String elem35 = struct.name;
					oprot.writeString(elem35);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class enterAlbumGiveaway_argsTupleSchemeFactory implements SchemeFactory {
			public enterAlbumGiveaway_argsTupleScheme getScheme() {
				return new enterAlbumGiveaway_argsTupleScheme();
			}
		}

		private static class enterAlbumGiveaway_argsTupleScheme extends TupleScheme<enterAlbumGiveaway_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, enterAlbumGiveaway_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetEmail()) {
					optionals.set(0);
				}
				if (struct.isSetName()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetEmail()) {
					String elem36 = struct.email;
					oprot.writeString(elem36);
				}
				if (struct.isSetName()) {
					String elem37 = struct.name;
					oprot.writeString(elem37);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, enterAlbumGiveaway_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.email = iprot.readString();
					struct.setEmailIsSet(true);
				}
				if (incoming.get(1)) {
					struct.name = iprot.readString();
					struct.setNameIsSet(true);
				}
			}

		}

	}

	public static class enterAlbumGiveaway_result implements org.apache.thrift.TBase<enterAlbumGiveaway_result, enterAlbumGiveaway_result._Fields>, java.io.Serializable, Cloneable, Comparable<enterAlbumGiveaway_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterAlbumGiveaway_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new enterAlbumGiveaway_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new enterAlbumGiveaway_resultTupleSchemeFactory());
		}

		public boolean success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public enterAlbumGiveaway_result() {
		}

		public enterAlbumGiveaway_result(
			boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public enterAlbumGiveaway_result(enterAlbumGiveaway_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public enterAlbumGiveaway_result deepCopy() {
			return new enterAlbumGiveaway_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;

		}

		public boolean isSuccess() {
			return this.success;
		}

		public enterAlbumGiveaway_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof enterAlbumGiveaway_result)
				return this.equals((enterAlbumGiveaway_result)that);
			return false;
		}

		public boolean equals(enterAlbumGiveaway_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(enterAlbumGiveaway_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("enterAlbumGiveaway_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class enterAlbumGiveaway_resultStandardSchemeFactory implements SchemeFactory {
			public enterAlbumGiveaway_resultStandardScheme getScheme() {
				return new enterAlbumGiveaway_resultStandardScheme();
			}
		}

		private static class enterAlbumGiveaway_resultStandardScheme extends StandardScheme<enterAlbumGiveaway_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, enterAlbumGiveaway_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
								struct.success = iprot.readBool();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, enterAlbumGiveaway_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					boolean elem38 = struct.success;
					oprot.writeBool(elem38);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class enterAlbumGiveaway_resultTupleSchemeFactory implements SchemeFactory {
			public enterAlbumGiveaway_resultTupleScheme getScheme() {
				return new enterAlbumGiveaway_resultTupleScheme();
			}
		}

		private static class enterAlbumGiveaway_resultTupleScheme extends TupleScheme<enterAlbumGiveaway_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, enterAlbumGiveaway_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					boolean elem39 = struct.success;
					oprot.writeBool(elem39);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, enterAlbumGiveaway_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}