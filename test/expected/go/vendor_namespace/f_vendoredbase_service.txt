// Autogenerated by Frugal Compiler (2.25.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vendor_namespace

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Sirupsen/logrus"
	"github.com/Workiva/frugal/lib/go"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var _ = logrus.DebugLevel

type FVendoredBase interface {
}

type FVendoredBaseClient struct {
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	methods         map[string]*frugal.Method
}

func NewFVendoredBaseClient(provider *frugal.FServiceProvider, middleware ...frugal.ServiceMiddleware) *FVendoredBaseClient {
	methods := make(map[string]*frugal.Method)
	client := &FVendoredBaseClient{
		transport:       provider.GetTransport(),
		protocolFactory: provider.GetProtocolFactory(),
		methods:         methods,
	}
	middleware = append(middleware, provider.GetMiddleware()...)
	return client
}

type FVendoredBaseProcessor struct {
	*frugal.FBaseProcessor
}

func NewFVendoredBaseProcessor(handler FVendoredBase, middleware ...frugal.ServiceMiddleware) *FVendoredBaseProcessor {
	p := &FVendoredBaseProcessor{frugal.NewFBaseProcessor()}
	return p
}

func vendoredbaseWriteApplicationError(ctx frugal.FContext, oprot *frugal.FProtocol, type_ int32, method, message string) error {
	x := thrift.NewTApplicationException(type_, message)
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(method, thrift.EXCEPTION, 0)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return x
}
