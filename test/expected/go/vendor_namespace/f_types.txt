// Autogenerated by Frugal Compiler (2.25.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vendor_namespace

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

const AConst = 1

func init() {
}

type MyEnum int64

const (
	MyEnum_ZERO MyEnum = 0
	MyEnum_TWO  MyEnum = 2
)

func (p MyEnum) String() string {
	switch p {
	case MyEnum_ZERO:
		return "ZERO"
	case MyEnum_TWO:
		return "TWO"
	}
	return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
	switch s {
	case "ZERO":
		return MyEnum_ZERO, nil
	case "TWO":
		return MyEnum_TWO, nil
	}
	return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func (p MyEnum) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MyEnum) UnmarshalText(text []byte) error {
	q, err := MyEnumFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *MyEnum) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = MyEnum(v)
	return nil
}

func (p *MyEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Item struct {
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Item) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Item"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}
