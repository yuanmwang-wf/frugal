// Autogenerated by Frugal Compiler (2.25.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package include_vendor

import (
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
	"github.com/Workiva/some/vendored/place/vendor_namespace"
)

const delimiter = "."

type MyScopePublisher interface {
	Open() error
	Close() error
	PublishnewItem(ctx frugal.FContext, req *vendor_namespace.Item) error
}

type myScopePublisher struct {
	transport       frugal.FPublisherTransport
	protocolFactory *frugal.FProtocolFactory
	methods         map[string]*frugal.Method
}

func NewMyScopePublisher(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) MyScopePublisher {
	transport, protocolFactory := provider.NewPublisher()
	methods := make(map[string]*frugal.Method)
	publisher := &myScopePublisher{
		transport:       transport,
		protocolFactory: protocolFactory,
		methods:         methods,
	}
	middleware = append(middleware, provider.GetMiddleware()...)
	methods["publishnewItem"] = frugal.NewMethod(publisher, publisher.publishnewItem, "publishnewItem", middleware)
	return publisher
}

func (p *myScopePublisher) Open() error {
	return p.transport.Open()
}

func (p *myScopePublisher) Close() error {
	return p.transport.Close()
}

func (p *myScopePublisher) PublishnewItem(ctx frugal.FContext, req *vendor_namespace.Item) error {
	ret := p.methods["publishnewItem"].Invoke([]interface{}{ctx, req})
	if ret[0] != nil {
		return ret[0].(error)
	}
	return nil
}

func (p *myScopePublisher) publishnewItem(ctx frugal.FContext, req *vendor_namespace.Item) error {
	op := "newItem"
	prefix := ""
	topic := fmt.Sprintf("%sMyScope%s%s", prefix, delimiter, op)
	buffer := frugal.NewTMemoryOutputBuffer(p.transport.GetPublishSizeLimit())
	oprot := p.protocolFactory.GetProtocol(buffer)
	if err := oprot.WriteRequestHeader(ctx); err != nil {
		return err
	}
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", req), err)
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	if err := oprot.Flush(); err != nil {
		return err
	}
	return p.transport.Publish(topic, buffer.Bytes())
}

type MyScopeSubscriber interface {
	SubscribenewItem(handler func(frugal.FContext, *vendor_namespace.Item)) (*frugal.FSubscription, error)
}

type MyScopeErrorableSubscriber interface {
	SubscribenewItemErrorable(handler func(frugal.FContext, *vendor_namespace.Item) error) (*frugal.FSubscription, error)
}

type myScopeSubscriber struct {
	provider   *frugal.FScopeProvider
	middleware []frugal.ServiceMiddleware
}

func NewMyScopeSubscriber(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) MyScopeSubscriber {
	middleware = append(middleware, provider.GetMiddleware()...)
	return &myScopeSubscriber{provider: provider, middleware: middleware}
}

func NewMyScopeErrorableSubscriber(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) MyScopeErrorableSubscriber {
	middleware = append(middleware, provider.GetMiddleware()...)
	return &myScopeSubscriber{provider: provider, middleware: middleware}
}

func (l *myScopeSubscriber) SubscribenewItem(handler func(frugal.FContext, *vendor_namespace.Item)) (*frugal.FSubscription, error) {
	return l.SubscribenewItemErrorable(func(fctx frugal.FContext, arg *vendor_namespace.Item) error {
		handler(fctx, arg)
		return nil
	})
}

func (l *myScopeSubscriber) SubscribenewItemErrorable(handler func(frugal.FContext, *vendor_namespace.Item) error) (*frugal.FSubscription, error) {
	op := "newItem"
	prefix := ""
	topic := fmt.Sprintf("%sMyScope%s%s", prefix, delimiter, op)
	transport, protocolFactory := l.provider.NewSubscriber()
	cb := l.recvnewItem(op, protocolFactory, handler)
	if err := transport.Subscribe(topic, cb); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	return sub, nil
}

func (l *myScopeSubscriber) recvnewItem(op string, pf *frugal.FProtocolFactory, handler func(frugal.FContext, *vendor_namespace.Item) error) frugal.FAsyncCallback {
	method := frugal.NewMethod(l, handler, "SubscribenewItem", l.middleware)
	return func(transport thrift.TTransport) error {
		iprot := pf.GetProtocol(transport)
		ctx, err := iprot.ReadRequestHeader()
		if err != nil {
			return err
		}

		name, _, _, err := iprot.ReadMessageBegin()
		if err != nil {
			return err
		}

		if name != op {
			iprot.Skip(thrift.STRUCT)
			iprot.ReadMessageEnd()
			return thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN_METHOD, "Unknown function"+name)
		}
		req := vendor_namespace.NewItem()
		if err := req.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", req), err)
		}
		iprot.ReadMessageEnd()

		return method.Invoke([]interface{}{ctx, req}).Error()
	}
}
