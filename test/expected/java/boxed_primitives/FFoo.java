/**
 * Autogenerated by Frugal Compiler (2.25.2)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package variety.java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.exception.TTransportExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.processor.FBaseProcessor;
import com.workiva.frugal.processor.FProcessor;
import com.workiva.frugal.processor.FProcessorFunction;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FServiceProvider;
import com.workiva.frugal.transport.FTransport;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import javax.annotation.Generated;
import java.util.Arrays;
import java.util.concurrent.*;


@Generated(value = "Autogenerated by Frugal Compiler (2.25.2)", date = "2015-11-24")
public class FFoo {

	private static final Logger logger = LoggerFactory.getLogger(FFoo.class);

	/**
	 * This is a thrift service. Frugal will generate bindings that include
	 * a frugal Context for each service call.
	 */
	public interface Iface extends actual_base.java.FBaseFoo.Iface {

		/**
		 * Ping the server.
		 * @deprecated don't use this; use "something else"
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException;

		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception;

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException;

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception;

		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException;

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException;

		public Thing getThing(FContext ctx) throws TException;

		public Integer getMyInt(FContext ctx) throws TException;

		public A use_subdir_struct(FContext ctx, A a) throws TException;

		public String sayHelloWith(FContext ctx, String newMessage) throws TException;

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException;

		public String sayAgain(FContext ctx, String messageResult) throws TException;

	}

	public static class Client extends actual_base.java.FBaseFoo.Client implements Iface {

		private Iface proxy;

		public Client(FServiceProvider provider, ServiceMiddleware... middleware) {
			super(provider, middleware);
			Iface client = new InternalClient(provider);
			List<ServiceMiddleware> combined = Arrays.asList(middleware);
			combined.addAll(provider.getMiddleware());
			middleware = combined.toArray(new ServiceMiddleware[0]);
			proxy = InvocationHandler.composeMiddleware(client, Iface.class, middleware);
		}

		/**
		 * Ping the server.
		 */
		@Deprecated
		public void Ping(FContext ctx) throws TException {
			logger.warn("Call to deprecated function 'Foo.Ping'");
			proxy.Ping(ctx);
		}

		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			return proxy.blah(ctx, num, Str, event);
		}

		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException {
			proxy.oneWay(ctx, id, req);
		}

		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			return proxy.bin_method(ctx, bin, Str);
		}

		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException {
			return proxy.param_modifiers(ctx, opt_num, default_num, req_num);
		}

		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			return proxy.underlying_types_test(ctx, list_type, set_type);
		}

		public Thing getThing(FContext ctx) throws TException {
			return proxy.getThing(ctx);
		}

		public Integer getMyInt(FContext ctx) throws TException {
			return proxy.getMyInt(ctx);
		}

		public A use_subdir_struct(FContext ctx, A a) throws TException {
			return proxy.use_subdir_struct(ctx, a);
		}

		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			return proxy.sayHelloWith(ctx, newMessage);
		}

		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			return proxy.whatDoYouSay(ctx, messageArgs);
		}

		public String sayAgain(FContext ctx, String messageResult) throws TException {
			return proxy.sayAgain(ctx, messageResult);
		}

	}

	private static class InternalClient extends actual_base.java.FBaseFoo.Client implements Iface {

		private FTransport transport;
		private FProtocolFactory protocolFactory;
		public InternalClient(FServiceProvider provider) {
			super(provider);
			this.transport = provider.getTransport();
			this.protocolFactory = provider.getProtocolFactory();
		}

		/**
		 * Ping the server.
		 */
		public void Ping(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
			Ping_args args = new Ping_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("ping")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "Ping failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "Ping failed: invalid message type");
			}
			Ping_result res = new Ping_result();
			res.read(iprot);
			iprot.readMessageEnd();
		}
		/**
		 * Blah the server.
		 */
		public Long blah(FContext ctx, Integer num, String Str, Event event) throws TException, AwesomeException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("blah", TMessageType.CALL, 0));
			blah_args args = new blah_args();
			args.setNum(num);
			args.setStr(Str);
			args.setEvent(event);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("blah")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "blah failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "blah failed: invalid message type");
			}
			blah_result res = new blah_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.awe != null) {
				throw res.awe;
			}
			if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "blah failed: unknown result");
		}
		/**
		 * oneway methods don't receive a response from the server.
		 */
		public void oneWay(FContext ctx, Long id, java.util.Map<Integer, String> req) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("oneWay", TMessageType.ONEWAY, 0));
			oneWay_args args = new oneWay_args();
			args.setId(id);
			args.setReq(req);
			args.write(oprot);
			oprot.writeMessageEnd();
			this.transport.oneway(ctx, memoryBuffer.getWriteBytes());
		}
		public java.nio.ByteBuffer bin_method(FContext ctx, java.nio.ByteBuffer bin, String Str) throws TException, actual_base.java.api_exception {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.CALL, 0));
			bin_method_args args = new bin_method_args();
			args.setBin(bin);
			args.setStr(Str);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("bin_method")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "bin_method failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "bin_method failed: invalid message type");
			}
			bin_method_result res = new bin_method_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			if (res.api != null) {
				throw res.api;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "bin_method failed: unknown result");
		}
		public Long param_modifiers(FContext ctx, Integer opt_num, Integer default_num, Integer req_num) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.CALL, 0));
			param_modifiers_args args = new param_modifiers_args();
			args.setOpt_num(opt_num);
			args.setDefault_num(default_num);
			args.setReq_num(req_num);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("param_modifiers")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "param_modifiers failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type");
			}
			param_modifiers_result res = new param_modifiers_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "param_modifiers failed: unknown result");
		}
		public java.util.List<Long> underlying_types_test(FContext ctx, java.util.List<Long> list_type, java.util.Set<Long> set_type) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.CALL, 0));
			underlying_types_test_args args = new underlying_types_test_args();
			args.setList_type(list_type);
			args.setSet_type(set_type);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("underlying_types_test")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "underlying_types_test failed: invalid message type");
			}
			underlying_types_test_result res = new underlying_types_test_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "underlying_types_test failed: unknown result");
		}
		public Thing getThing(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getThing", TMessageType.CALL, 0));
			getThing_args args = new getThing_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("getThing")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "getThing failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getThing failed: invalid message type");
			}
			getThing_result res = new getThing_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getThing failed: unknown result");
		}
		public Integer getMyInt(FContext ctx) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.CALL, 0));
			getMyInt_args args = new getMyInt_args();
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("getMyInt")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "getMyInt failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type");
			}
			getMyInt_result res = new getMyInt_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "getMyInt failed: unknown result");
		}
		public A use_subdir_struct(FContext ctx, A a) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.CALL, 0));
			use_subdir_struct_args args = new use_subdir_struct_args();
			args.setA(a);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("use_subdir_struct")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "use_subdir_struct failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "use_subdir_struct failed: invalid message type");
			}
			use_subdir_struct_result res = new use_subdir_struct_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "use_subdir_struct failed: unknown result");
		}
		public String sayHelloWith(FContext ctx, String newMessage) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.CALL, 0));
			sayHelloWith_args args = new sayHelloWith_args();
			args.setNewMessage(newMessage);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("sayHelloWith")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "sayHelloWith failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type");
			}
			sayHelloWith_result res = new sayHelloWith_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayHelloWith failed: unknown result");
		}
		public String whatDoYouSay(FContext ctx, String messageArgs) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.CALL, 0));
			whatDoYouSay_args args = new whatDoYouSay_args();
			args.setMessageArgs(messageArgs);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("whatDoYouSay")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type");
			}
			whatDoYouSay_result res = new whatDoYouSay_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "whatDoYouSay failed: unknown result");
		}
		public String sayAgain(FContext ctx, String messageResult) throws TException {
			TMemoryOutputBuffer memoryBuffer = new TMemoryOutputBuffer(this.transport.getRequestSizeLimit());
			FProtocol oprot = this.protocolFactory.getProtocol(memoryBuffer);
			oprot.writeRequestHeader(ctx);
			oprot.writeMessageBegin(new TMessage("sayAgain", TMessageType.CALL, 0));
			sayAgain_args args = new sayAgain_args();
			args.setMessageResult(messageResult);
			args.write(oprot);
			oprot.writeMessageEnd();
			TTransport response = this.transport.request(ctx, memoryBuffer.getWriteBytes());

			FProtocol iprot = this.protocolFactory.getProtocol(response);
			iprot.readResponseHeader(ctx);
			TMessage message = iprot.readMessageBegin();
			if (!message.name.equals("sayAgain")) {
				throw new TApplicationException(TApplicationExceptionType.WRONG_METHOD_NAME, "sayAgain failed: wrong method name");
			}
			if (message.type == TMessageType.EXCEPTION) {
				TApplicationException e = TApplicationException.read(iprot);
				iprot.readMessageEnd();
				TException returnedException = e;
				if (e.getType() == TApplicationExceptionType.RESPONSE_TOO_LARGE) {
					returnedException = new TTransportException(TTransportExceptionType.RESPONSE_TOO_LARGE, e.getMessage());
				}
				throw returnedException;
			}
			if (message.type != TMessageType.REPLY) {
				throw new TApplicationException(TApplicationExceptionType.INVALID_MESSAGE_TYPE, "sayAgain failed: invalid message type");
			}
			sayAgain_result res = new sayAgain_result();
			res.read(iprot);
			iprot.readMessageEnd();
			if (res.isSetSuccess()) {
				return res.success;
			}
			throw new TApplicationException(TApplicationExceptionType.MISSING_RESULT, "sayAgain failed: unknown result");
		}
	}

	public static class Processor extends actual_base.java.FBaseFoo.Processor implements FProcessor {

		private Iface handler;

		public Processor(Iface iface, ServiceMiddleware... middleware) {
			super(iface, middleware);
			handler = InvocationHandler.composeMiddleware(iface, Iface.class, middleware);
		}

		protected java.util.Map<String, FProcessorFunction> getProcessMap() {
			java.util.Map<String, FProcessorFunction> processMap = super.getProcessMap();
			processMap.put("ping", new Ping());
			processMap.put("blah", new Blah());
			processMap.put("oneWay", new OneWay());
			processMap.put("bin_method", new Bin_method());
			processMap.put("param_modifiers", new Param_modifiers());
			processMap.put("underlying_types_test", new Underlying_types_test());
			processMap.put("getThing", new GetThing());
			processMap.put("getMyInt", new GetMyInt());
			processMap.put("use_subdir_struct", new Use_subdir_struct());
			processMap.put("sayHelloWith", new SayHelloWith());
			processMap.put("whatDoYouSay", new WhatDoYouSay());
			processMap.put("sayAgain", new SayAgain());
			return processMap;
		}

		protected java.util.Map<String, java.util.Map<String, String>> getAnnotationsMap() {
			java.util.Map<String, java.util.Map<String, String>> annotationsMap = super.getAnnotationsMap();
			java.util.Map<String, String> PingMap = new java.util.HashMap<>();
			PingMap.put("deprecated", "don't use this; use \"something else\"");
			annotationsMap.put("ping", PingMap);
			return annotationsMap;
		}

		@Override
		public void addMiddleware(ServiceMiddleware middleware) {
			super.addMiddleware(middleware);
			handler = InvocationHandler.composeMiddleware(handler, Iface.class, new ServiceMiddleware[]{middleware});
		}

		private class Ping implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				logger.warn("Deprecated function 'Foo.Ping' was called by a client");
				Ping_args args = new Ping_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "Ping", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				Ping_result result = new Ping_result();
				try {
					handler.Ping(ctx);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "ping", "Internal error processing Ping: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "ping", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class Blah implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				blah_args args = new blah_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "blah", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				blah_result result = new blah_result();
				try {
					result.success = handler.blah(ctx, args.num, args.Str, args.event);
					result.setSuccessIsSet(true);
				} catch (AwesomeException awe) {
					result.awe = awe;
				} catch (actual_base.java.api_exception api) {
					result.api = api;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("blah", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "blah", "Internal error processing blah: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("blah", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "blah", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class OneWay implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				oneWay_args args = new oneWay_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					throw e;
				}

				iprot.readMessageEnd();
				handler.oneWay(ctx, args.id, args.req);
			}
		}

		private class Bin_method implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				bin_method_args args = new bin_method_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "bin_method", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				bin_method_result result = new bin_method_result();
				try {
					result.success = handler.bin_method(ctx, args.bin, args.Str);
					result.setSuccessIsSet(true);
				} catch (actual_base.java.api_exception api) {
					result.api = api;
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "bin_method", "Internal error processing bin_method: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("bin_method", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "bin_method", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class Param_modifiers implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				param_modifiers_args args = new param_modifiers_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "param_modifiers", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				param_modifiers_result result = new param_modifiers_result();
				try {
					result.success = handler.param_modifiers(ctx, args.opt_num, args.default_num, args.req_num);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "param_modifiers", "Internal error processing param_modifiers: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("param_modifiers", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "param_modifiers", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class Underlying_types_test implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				underlying_types_test_args args = new underlying_types_test_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "underlying_types_test", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				underlying_types_test_result result = new underlying_types_test_result();
				try {
					result.success = handler.underlying_types_test(ctx, args.list_type, args.set_type);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "underlying_types_test", "Internal error processing underlying_types_test: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("underlying_types_test", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "underlying_types_test", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class GetThing implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				getThing_args args = new getThing_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "getThing", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				getThing_result result = new getThing_result();
				try {
					result.success = handler.getThing(ctx);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("getThing", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "getThing", "Internal error processing getThing: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("getThing", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "getThing", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class GetMyInt implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				getMyInt_args args = new getMyInt_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "getMyInt", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				getMyInt_result result = new getMyInt_result();
				try {
					result.success = handler.getMyInt(ctx);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "getMyInt", "Internal error processing getMyInt: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("getMyInt", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "getMyInt", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class Use_subdir_struct implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				use_subdir_struct_args args = new use_subdir_struct_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "use_subdir_struct", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				use_subdir_struct_result result = new use_subdir_struct_result();
				try {
					result.success = handler.use_subdir_struct(ctx, args.a);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "use_subdir_struct", "Internal error processing use_subdir_struct: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("use_subdir_struct", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "use_subdir_struct", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class SayHelloWith implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				sayHelloWith_args args = new sayHelloWith_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "sayHelloWith", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				sayHelloWith_result result = new sayHelloWith_result();
				try {
					result.success = handler.sayHelloWith(ctx, args.newMessage);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "sayHelloWith", "Internal error processing sayHelloWith: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("sayHelloWith", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "sayHelloWith", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class WhatDoYouSay implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				whatDoYouSay_args args = new whatDoYouSay_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "whatDoYouSay", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				whatDoYouSay_result result = new whatDoYouSay_result();
				try {
					result.success = handler.whatDoYouSay(ctx, args.messageArgs);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "whatDoYouSay", "Internal error processing whatDoYouSay: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("whatDoYouSay", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "whatDoYouSay", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

		private class SayAgain implements FProcessorFunction {

			public void process(FContext ctx, FProtocol iprot, FProtocol oprot) throws TException {
				sayAgain_args args = new sayAgain_args();
				try {
					args.read(iprot);
				} catch (TException e) {
					iprot.readMessageEnd();
					synchronized (WRITE_LOCK) {
						e = writeApplicationException(ctx, oprot, TApplicationExceptionType.PROTOCOL_ERROR, "sayAgain", e.getMessage());
					}
					throw e;
				}

				iprot.readMessageEnd();
				sayAgain_result result = new sayAgain_result();
				try {
					result.success = handler.sayAgain(ctx, args.messageResult);
					result.setSuccessIsSet(true);
				} catch (TApplicationException e) {
					oprot.writeResponseHeader(ctx);
					oprot.writeMessageBegin(new TMessage("sayAgain", TMessageType.EXCEPTION, 0));
					e.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				} catch (TException e) {
					synchronized (WRITE_LOCK) {
						e = (TApplicationException) writeApplicationException(ctx, oprot, TApplicationExceptionType.INTERNAL_ERROR, "sayAgain", "Internal error processing sayAgain: " + e.getMessage()).initCause(e);
					}
					throw e;
				}
				synchronized (WRITE_LOCK) {
					try {
						oprot.writeResponseHeader(ctx);
						oprot.writeMessageBegin(new TMessage("sayAgain", TMessageType.REPLY, 0));
						result.write(oprot);
						oprot.writeMessageEnd();
						oprot.getTransport().flush();
					} catch (TTransportException e) {
						if (e.getType() == TTransportExceptionType.REQUEST_TOO_LARGE) {
							writeApplicationException(ctx, oprot, TApplicationExceptionType.RESPONSE_TOO_LARGE, "sayAgain", "response too large: " + e.getMessage());
						} else {
							throw e;
						}
					}
				}
			}
		}

	}

	public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
		}

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public Ping_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Ping_args(Ping_args other) {
		}

		public Ping_args deepCopy() {
			return new Ping_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Ping_args)
				return this.equals((Ping_args)that);
			return false;
		}

		public boolean equals(Ping_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(Ping_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Ping_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
			public Ping_argsStandardScheme getScheme() {
				return new Ping_argsStandardScheme();
			}
		}

		private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
			public Ping_argsTupleScheme getScheme() {
				return new Ping_argsTupleScheme();
			}
		}

		private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}

		}

	}

	public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");


		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
		}

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public Ping_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public Ping_result(Ping_result other) {
		}

		public Ping_result deepCopy() {
			return new Ping_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof Ping_result)
				return this.equals((Ping_result)that);
			return false;
		}

		public boolean equals(Ping_result that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(Ping_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("Ping_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
			public Ping_resultStandardScheme getScheme() {
				return new Ping_resultStandardScheme();
			}
		}

		private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
			public Ping_resultTupleScheme getScheme() {
				return new Ping_resultTupleScheme();
			}
		}

		private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}

		}

	}

	public static class blah_args implements org.apache.thrift.TBase<blah_args, blah_args._Fields>, java.io.Serializable, Cloneable, Comparable<blah_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blah_args");

		private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
		private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("Str", org.apache.thrift.protocol.TType.STRING, (short)2);
		private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new blah_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new blah_argsTupleSchemeFactory());
		}

		public Integer num;
		public String Str;
		public Event event;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			NUM((short)1, "num"),
			STR((short)2, "Str"),
			EVENT((short)3, "event")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // NUM
						return NUM;
					case 2: // STR
						return STR;
					case 3: // EVENT
						return EVENT;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public blah_args() {
		}

		public blah_args(
			Integer num,
			String Str,
			Event event) {
			this();
			this.num = num;
			this.Str = Str;
			this.event = event;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public blah_args(blah_args other) {
			if (other.isSetNum()) {
				this.num = other.num;
			}
			if (other.isSetStr()) {
				this.Str = other.Str;
			}
			if (other.isSetEvent()) {
				this.event = new Event(other.event);
			}
		}

		public blah_args deepCopy() {
			return new blah_args(this);
		}

		@Override
		public void clear() {
			this.num = null;

			this.Str = null;

			this.event = null;

		}

		public Integer getNum() {
			return this.num;
		}

		public blah_args setNum(Integer num) {
			this.num = num;
			return this;
		}

		public void unsetNum() {
			this.num = null;
		}

		/** Returns true if field num is set (has been assigned a value) and false otherwise */
		public boolean isSetNum() {
			return this.num != null;
		}

		public void setNumIsSet(boolean value) {
			if (!value) {
				this.num = null;
			}
		}

		public String getStr() {
			return this.Str;
		}

		public blah_args setStr(String Str) {
			this.Str = Str;
			return this;
		}

		public void unsetStr() {
			this.Str = null;
		}

		/** Returns true if field Str is set (has been assigned a value) and false otherwise */
		public boolean isSetStr() {
			return this.Str != null;
		}

		public void setStrIsSet(boolean value) {
			if (!value) {
				this.Str = null;
			}
		}

		public Event getEvent() {
			return this.event;
		}

		public blah_args setEvent(Event event) {
			this.event = event;
			return this;
		}

		public void unsetEvent() {
			this.event = null;
		}

		/** Returns true if field event is set (has been assigned a value) and false otherwise */
		public boolean isSetEvent() {
			return this.event != null;
		}

		public void setEventIsSet(boolean value) {
			if (!value) {
				this.event = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case NUM:
				if (value == null) {
					unsetNum();
				} else {
					setNum((Integer)value);
				}
				break;

			case STR:
				if (value == null) {
					unsetStr();
				} else {
					setStr((String)value);
				}
				break;

			case EVENT:
				if (value == null) {
					unsetEvent();
				} else {
					setEvent((Event)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case NUM:
				return getNum();

			case STR:
				return getStr();

			case EVENT:
				return getEvent();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case NUM:
				return isSetNum();
			case STR:
				return isSetStr();
			case EVENT:
				return isSetEvent();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof blah_args)
				return this.equals((blah_args)that);
			return false;
		}

		public boolean equals(blah_args that) {
			if (that == null)
				return false;

			boolean this_present_num = true && this.isSetNum();
			boolean that_present_num = true && that.isSetNum();
			if (this_present_num || that_present_num) {
				if (!(this_present_num && that_present_num))
					return false;
				if (!this.num.equals(that.num))
					return false;
			}

			boolean this_present_Str = true && this.isSetStr();
			boolean that_present_Str = true && that.isSetStr();
			if (this_present_Str || that_present_Str) {
				if (!(this_present_Str && that_present_Str))
					return false;
				if (!this.Str.equals(that.Str))
					return false;
			}

			boolean this_present_event = true && this.isSetEvent();
			boolean that_present_event = true && that.isSetEvent();
			if (this_present_event || that_present_event) {
				if (!(this_present_event && that_present_event))
					return false;
				if (!this.event.equals(that.event))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_num = true && (isSetNum());
			list.add(present_num);
			if (present_num)
				list.add(num);

			boolean present_Str = true && (isSetStr());
			list.add(present_Str);
			if (present_Str)
				list.add(Str);

			boolean present_event = true && (isSetEvent());
			list.add(present_event);
			if (present_event)
				list.add(event);

			return list.hashCode();
		}

		@Override
		public int compareTo(blah_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNum()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Str, other.Str);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetEvent()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("blah_args(");
			boolean first = true;

			sb.append("num:");
			if (this.num == null) {
				sb.append("null");
			} else {
				sb.append(this.num);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("Str:");
			if (this.Str == null) {
				sb.append("null");
			} else {
				sb.append(this.Str);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("event:");
			if (this.event == null) {
				sb.append("null");
			} else {
				sb.append(this.event);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (event != null) {
				event.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class blah_argsStandardSchemeFactory implements SchemeFactory {
			public blah_argsStandardScheme getScheme() {
				return new blah_argsStandardScheme();
			}
		}

		private static class blah_argsStandardScheme extends StandardScheme<blah_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, blah_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // NUM
							if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
								struct.num = iprot.readI32();
								struct.setNumIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // STR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.Str = iprot.readString();
								struct.setStrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 3: // EVENT
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.event = new Event();
								struct.event.read(iprot);
								struct.setEventIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, blah_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(NUM_FIELD_DESC);
				Integer elem222 = struct.num;
				if (elem222 == null) {
					elem222 = 0;
				}
				oprot.writeI32(elem222);
				oprot.writeFieldEnd();
				if (struct.Str != null) {
					oprot.writeFieldBegin(STR_FIELD_DESC);
					String elem223 = struct.Str;
					oprot.writeString(elem223);
					oprot.writeFieldEnd();
				}
				if (struct.event != null) {
					oprot.writeFieldBegin(EVENT_FIELD_DESC);
					struct.event.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class blah_argsTupleSchemeFactory implements SchemeFactory {
			public blah_argsTupleScheme getScheme() {
				return new blah_argsTupleScheme();
			}
		}

		private static class blah_argsTupleScheme extends TupleScheme<blah_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetNum()) {
					optionals.set(0);
				}
				if (struct.isSetStr()) {
					optionals.set(1);
				}
				if (struct.isSetEvent()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetNum()) {
					Integer elem224 = struct.num;
					if (elem224 == null) {
						elem224 = 0;
					}
					oprot.writeI32(elem224);
				}
				if (struct.isSetStr()) {
					String elem225 = struct.Str;
					oprot.writeString(elem225);
				}
				if (struct.isSetEvent()) {
					struct.event.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.num = iprot.readI32();
					struct.setNumIsSet(true);
				}
				if (incoming.get(1)) {
					struct.Str = iprot.readString();
					struct.setStrIsSet(true);
				}
				if (incoming.get(2)) {
					struct.event = new Event();
					struct.event.read(iprot);
					struct.setEventIsSet(true);
				}
			}

		}

	}

	public static class blah_result implements org.apache.thrift.TBase<blah_result, blah_result._Fields>, java.io.Serializable, Cloneable, Comparable<blah_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blah_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
		private static final org.apache.thrift.protocol.TField AWE_FIELD_DESC = new org.apache.thrift.protocol.TField("awe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
		private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRUCT, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new blah_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new blah_resultTupleSchemeFactory());
		}

		public Long success;
		public AwesomeException awe;
		public actual_base.java.api_exception api;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			AWE((short)1, "awe"),
			API((short)2, "api")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // AWE
						return AWE;
					case 2: // API
						return API;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public blah_result() {
		}

		public blah_result(
			Long success,
			AwesomeException awe,
			actual_base.java.api_exception api) {
			this();
			this.success = success;
			this.awe = awe;
			this.api = api;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public blah_result(blah_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
			if (other.isSetAwe()) {
				this.awe = new AwesomeException(other.awe);
			}
			if (other.isSetApi()) {
				this.api = new actual_base.java.api_exception(other.api);
			}
		}

		public blah_result deepCopy() {
			return new blah_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.awe = null;

			this.api = null;

		}

		public Long getSuccess() {
			return this.success;
		}

		public blah_result setSuccess(Long success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public AwesomeException getAwe() {
			return this.awe;
		}

		public blah_result setAwe(AwesomeException awe) {
			this.awe = awe;
			return this;
		}

		public void unsetAwe() {
			this.awe = null;
		}

		/** Returns true if field awe is set (has been assigned a value) and false otherwise */
		public boolean isSetAwe() {
			return this.awe != null;
		}

		public void setAweIsSet(boolean value) {
			if (!value) {
				this.awe = null;
			}
		}

		public actual_base.java.api_exception getApi() {
			return this.api;
		}

		public blah_result setApi(actual_base.java.api_exception api) {
			this.api = api;
			return this;
		}

		public void unsetApi() {
			this.api = null;
		}

		/** Returns true if field api is set (has been assigned a value) and false otherwise */
		public boolean isSetApi() {
			return this.api != null;
		}

		public void setApiIsSet(boolean value) {
			if (!value) {
				this.api = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long)value);
				}
				break;

			case AWE:
				if (value == null) {
					unsetAwe();
				} else {
					setAwe((AwesomeException)value);
				}
				break;

			case API:
				if (value == null) {
					unsetApi();
				} else {
					setApi((actual_base.java.api_exception)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case AWE:
				return getAwe();

			case API:
				return getApi();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case AWE:
				return isSetAwe();
			case API:
				return isSetApi();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof blah_result)
				return this.equals((blah_result)that);
			return false;
		}

		public boolean equals(blah_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_awe = true && this.isSetAwe();
			boolean that_present_awe = true && that.isSetAwe();
			if (this_present_awe || that_present_awe) {
				if (!(this_present_awe && that_present_awe))
					return false;
				if (!this.awe.equals(that.awe))
					return false;
			}

			boolean this_present_api = true && this.isSetApi();
			boolean that_present_api = true && that.isSetApi();
			if (this_present_api || that_present_api) {
				if (!(this_present_api && that_present_api))
					return false;
				if (!this.api.equals(that.api))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_awe = true && (isSetAwe());
			list.add(present_awe);
			if (present_awe)
				list.add(awe);

			boolean present_api = true && (isSetApi());
			list.add(present_api);
			if (present_api)
				list.add(api);

			return list.hashCode();
		}

		@Override
		public int compareTo(blah_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetAwe()).compareTo(other.isSetAwe());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAwe()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awe, other.awe);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetApi()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("blah_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("awe:");
			if (this.awe == null) {
				sb.append("null");
			} else {
				sb.append(this.awe);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("api:");
			if (this.api == null) {
				sb.append("null");
			} else {
				sb.append(this.api);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (awe != null) {
				awe.validate();
			}
			if (api != null) {
				api.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class blah_resultStandardSchemeFactory implements SchemeFactory {
			public blah_resultStandardScheme getScheme() {
				return new blah_resultStandardScheme();
			}
		}

		private static class blah_resultStandardScheme extends StandardScheme<blah_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, blah_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
								struct.success = iprot.readI64();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // AWE
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.awe = new AwesomeException();
								struct.awe.read(iprot);
								struct.setAweIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // API
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.api = new actual_base.java.api_exception();
								struct.api.read(iprot);
								struct.setApiIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, blah_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					Long elem226 = struct.success;
					if (elem226 == null) {
						elem226 = 0L;
					}
					oprot.writeI64(elem226);
					oprot.writeFieldEnd();
				}
				if (struct.awe != null) {
					oprot.writeFieldBegin(AWE_FIELD_DESC);
					struct.awe.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.api != null) {
					oprot.writeFieldBegin(API_FIELD_DESC);
					struct.api.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class blah_resultTupleSchemeFactory implements SchemeFactory {
			public blah_resultTupleScheme getScheme() {
				return new blah_resultTupleScheme();
			}
		}

		private static class blah_resultTupleScheme extends TupleScheme<blah_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, blah_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetAwe()) {
					optionals.set(1);
				}
				if (struct.isSetApi()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSuccess()) {
					Long elem227 = struct.success;
					if (elem227 == null) {
						elem227 = 0L;
					}
					oprot.writeI64(elem227);
				}
				if (struct.isSetAwe()) {
					struct.awe.write(oprot);
				}
				if (struct.isSetApi()) {
					struct.api.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, blah_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.awe = new AwesomeException();
					struct.awe.read(iprot);
					struct.setAweIsSet(true);
				}
				if (incoming.get(2)) {
					struct.api = new actual_base.java.api_exception();
					struct.api.read(iprot);
					struct.setApiIsSet(true);
				}
			}

		}

	}

	public static class oneWay_args implements org.apache.thrift.TBase<oneWay_args, oneWay_args._Fields>, java.io.Serializable, Cloneable, Comparable<oneWay_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("oneWay_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
		private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.MAP, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new oneWay_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new oneWay_argsTupleSchemeFactory());
		}

		public Long id;
		public java.util.Map<Integer, String> req;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short)1, "id"),
			REQ((short)2, "req")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // ID
						return ID;
					case 2: // REQ
						return REQ;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public oneWay_args() {
		}

		public oneWay_args(
			Long id,
			java.util.Map<Integer, String> req) {
			this();
			this.id = id;
			this.req = req;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public oneWay_args(oneWay_args other) {
			if (other.isSetId()) {
				this.id = other.id;
			}
			if (other.isSetReq()) {
				this.req = new HashMap<Integer,String>(other.req.size());
				for (Map.Entry<Integer, String> elem228 : other.req.entrySet()) {
					Integer elem230 = elem228.getKey();
					String elem229 = elem228.getValue();
					this.req.put(elem230, elem229);
				}
			}
		}

		public oneWay_args deepCopy() {
			return new oneWay_args(this);
		}

		@Override
		public void clear() {
			this.id = null;

			this.req = null;

		}

		public Long getId() {
			return this.id;
		}

		public oneWay_args setId(Long id) {
			this.id = id;
			return this;
		}

		public void unsetId() {
			this.id = null;
		}

		/** Returns true if field id is set (has been assigned a value) and false otherwise */
		public boolean isSetId() {
			return this.id != null;
		}

		public void setIdIsSet(boolean value) {
			if (!value) {
				this.id = null;
			}
		}

		public int getReqSize() {
			return (this.req == null) ? 0 : this.req.size();
		}

		public void putToReq(Integer key, String val) {
			if (this.req == null) {
				this.req = new HashMap<Integer,String>();
			}
			this.req.put(key, val);
		}

		public java.util.Map<Integer, String> getReq() {
			return this.req;
		}

		public oneWay_args setReq(java.util.Map<Integer, String> req) {
			this.req = req;
			return this;
		}

		public void unsetReq() {
			this.req = null;
		}

		/** Returns true if field req is set (has been assigned a value) and false otherwise */
		public boolean isSetReq() {
			return this.req != null;
		}

		public void setReqIsSet(boolean value) {
			if (!value) {
				this.req = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Long)value);
				}
				break;

			case REQ:
				if (value == null) {
					unsetReq();
				} else {
					setReq((java.util.Map<Integer, String>)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case REQ:
				return getReq();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case REQ:
				return isSetReq();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof oneWay_args)
				return this.equals((oneWay_args)that);
			return false;
		}

		public boolean equals(oneWay_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true && this.isSetId();
			boolean that_present_id = true && that.isSetId();
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (!this.id.equals(that.id))
					return false;
			}

			boolean this_present_req = true && this.isSetReq();
			boolean that_present_req = true && that.isSetReq();
			if (this_present_req || that_present_req) {
				if (!(this_present_req && that_present_req))
					return false;
				if (!this.req.equals(that.req))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_id = true && (isSetId());
			list.add(present_id);
			if (present_id)
				list.add(id);

			boolean present_req = true && (isSetReq());
			list.add(present_req);
			if (present_req)
				list.add(req);

			return list.hashCode();
		}

		@Override
		public int compareTo(oneWay_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReq()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("oneWay_args(");
			boolean first = true;

			sb.append("id:");
			if (this.id == null) {
				sb.append("null");
			} else {
				sb.append(this.id);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("req:");
			if (this.req == null) {
				sb.append("null");
			} else {
				sb.append(this.req);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class oneWay_argsStandardSchemeFactory implements SchemeFactory {
			public oneWay_argsStandardScheme getScheme() {
				return new oneWay_argsStandardScheme();
			}
		}

		private static class oneWay_argsStandardScheme extends StandardScheme<oneWay_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, oneWay_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // ID
							if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
								struct.id = iprot.readI64();
								struct.setIdIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // REQ
							if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
								org.apache.thrift.protocol.TMap elem231 = iprot.readMapBegin();
								struct.req = new HashMap<Integer,String>(2*elem231.size);
								for (int elem232 = 0; elem232 < elem231.size; ++elem232) {
									Integer elem234 = iprot.readI32();
									String elem233 = iprot.readString();
									struct.req.put(elem234, elem233);
								}
								iprot.readMapEnd();
								struct.setReqIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, oneWay_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				Long elem235 = struct.id;
				if (elem235 == null) {
					elem235 = 0L;
				}
				oprot.writeI64(elem235);
				oprot.writeFieldEnd();
				if (struct.req != null) {
					oprot.writeFieldBegin(REQ_FIELD_DESC);
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.req.size()));
					for (Map.Entry<Integer, String> elem236 : struct.req.entrySet()) {
						Integer elem237 = elem236.getKey();
						if (elem237 == null) {
							elem237 = 0;
						}
						oprot.writeI32(elem237);
						String elem238 = elem236.getValue();
						oprot.writeString(elem238);
					}
					oprot.writeMapEnd();
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class oneWay_argsTupleSchemeFactory implements SchemeFactory {
			public oneWay_argsTupleScheme getScheme() {
				return new oneWay_argsTupleScheme();
			}
		}

		private static class oneWay_argsTupleScheme extends TupleScheme<oneWay_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetReq()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					Long elem239 = struct.id;
					if (elem239 == null) {
						elem239 = 0L;
					}
					oprot.writeI64(elem239);
				}
				if (struct.isSetReq()) {
					oprot.writeI32(struct.req.size());
					for (Map.Entry<Integer, String> elem240 : struct.req.entrySet()) {
						Integer elem241 = elem240.getKey();
						if (elem241 == null) {
							elem241 = 0;
						}
						oprot.writeI32(elem241);
						String elem242 = elem240.getValue();
						oprot.writeString(elem242);
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					org.apache.thrift.protocol.TMap elem243 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.req = new HashMap<Integer,String>(2*elem243.size);
					for (int elem244 = 0; elem244 < elem243.size; ++elem244) {
						Integer elem246 = iprot.readI32();
						String elem245 = iprot.readString();
						struct.req.put(elem246, elem245);
					}
					struct.setReqIsSet(true);
				}
			}

		}

	}

	public static class bin_method_args implements org.apache.thrift.TBase<bin_method_args, bin_method_args._Fields>, java.io.Serializable, Cloneable, Comparable<bin_method_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bin_method_args");

		private static final org.apache.thrift.protocol.TField BIN_FIELD_DESC = new org.apache.thrift.protocol.TField("bin", org.apache.thrift.protocol.TType.STRING, (short)1);
		private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("Str", org.apache.thrift.protocol.TType.STRING, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new bin_method_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new bin_method_argsTupleSchemeFactory());
		}

		public java.nio.ByteBuffer bin;
		public String Str;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			BIN((short)1, "bin"),
			STR((short)2, "Str")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // BIN
						return BIN;
					case 2: // STR
						return STR;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public bin_method_args() {
		}

		public bin_method_args(
			java.nio.ByteBuffer bin,
			String Str) {
			this();
			this.bin = org.apache.thrift.TBaseHelper.copyBinary(bin);
			this.Str = Str;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public bin_method_args(bin_method_args other) {
			if (other.isSetBin()) {
				this.bin = org.apache.thrift.TBaseHelper.copyBinary(other.bin);
			}
			if (other.isSetStr()) {
				this.Str = other.Str;
			}
		}

		public bin_method_args deepCopy() {
			return new bin_method_args(this);
		}

		@Override
		public void clear() {
			this.bin = null;

			this.Str = null;

		}

		public byte[] getBin() {
			setBin(org.apache.thrift.TBaseHelper.rightSize(bin));
			return bin == null ? null : bin.array();
		}

		public java.nio.ByteBuffer bufferForBin() {
			return org.apache.thrift.TBaseHelper.copyBinary(bin);
		}

		public bin_method_args setBin(byte[] bin) {
			this.bin = bin == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(bin, bin.length));
			return this;
		}

		public bin_method_args setBin(java.nio.ByteBuffer bin) {
			this.bin = org.apache.thrift.TBaseHelper.copyBinary(bin);
			return this;
		}

		public void unsetBin() {
			this.bin = null;
		}

		/** Returns true if field bin is set (has been assigned a value) and false otherwise */
		public boolean isSetBin() {
			return this.bin != null;
		}

		public void setBinIsSet(boolean value) {
			if (!value) {
				this.bin = null;
			}
		}

		public String getStr() {
			return this.Str;
		}

		public bin_method_args setStr(String Str) {
			this.Str = Str;
			return this;
		}

		public void unsetStr() {
			this.Str = null;
		}

		/** Returns true if field Str is set (has been assigned a value) and false otherwise */
		public boolean isSetStr() {
			return this.Str != null;
		}

		public void setStrIsSet(boolean value) {
			if (!value) {
				this.Str = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case BIN:
				if (value == null) {
					unsetBin();
				} else {
					setBin((java.nio.ByteBuffer)value);
				}
				break;

			case STR:
				if (value == null) {
					unsetStr();
				} else {
					setStr((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case BIN:
				return getBin();

			case STR:
				return getStr();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case BIN:
				return isSetBin();
			case STR:
				return isSetStr();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof bin_method_args)
				return this.equals((bin_method_args)that);
			return false;
		}

		public boolean equals(bin_method_args that) {
			if (that == null)
				return false;

			boolean this_present_bin = true && this.isSetBin();
			boolean that_present_bin = true && that.isSetBin();
			if (this_present_bin || that_present_bin) {
				if (!(this_present_bin && that_present_bin))
					return false;
				if (!this.bin.equals(that.bin))
					return false;
			}

			boolean this_present_Str = true && this.isSetStr();
			boolean that_present_Str = true && that.isSetStr();
			if (this_present_Str || that_present_Str) {
				if (!(this_present_Str && that_present_Str))
					return false;
				if (!this.Str.equals(that.Str))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_bin = true && (isSetBin());
			list.add(present_bin);
			if (present_bin)
				list.add(bin);

			boolean present_Str = true && (isSetStr());
			list.add(present_Str);
			if (present_Str)
				list.add(Str);

			return list.hashCode();
		}

		@Override
		public int compareTo(bin_method_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetBin()).compareTo(other.isSetBin());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetBin()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bin, other.bin);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Str, other.Str);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("bin_method_args(");
			boolean first = true;

			sb.append("bin:");
			if (this.bin == null) {
				sb.append("null");
			} else {
				org.apache.thrift.TBaseHelper.toString(this.bin, sb);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("Str:");
			if (this.Str == null) {
				sb.append("null");
			} else {
				sb.append(this.Str);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class bin_method_argsStandardSchemeFactory implements SchemeFactory {
			public bin_method_argsStandardScheme getScheme() {
				return new bin_method_argsStandardScheme();
			}
		}

		private static class bin_method_argsStandardScheme extends StandardScheme<bin_method_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, bin_method_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // BIN
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.bin = iprot.readBinary();
								struct.setBinIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // STR
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.Str = iprot.readString();
								struct.setStrIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, bin_method_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.bin != null) {
					oprot.writeFieldBegin(BIN_FIELD_DESC);
					java.nio.ByteBuffer elem247 = struct.bin;
					oprot.writeBinary(elem247);
					oprot.writeFieldEnd();
				}
				if (struct.Str != null) {
					oprot.writeFieldBegin(STR_FIELD_DESC);
					String elem248 = struct.Str;
					oprot.writeString(elem248);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class bin_method_argsTupleSchemeFactory implements SchemeFactory {
			public bin_method_argsTupleScheme getScheme() {
				return new bin_method_argsTupleScheme();
			}
		}

		private static class bin_method_argsTupleScheme extends TupleScheme<bin_method_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, bin_method_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetBin()) {
					optionals.set(0);
				}
				if (struct.isSetStr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetBin()) {
					java.nio.ByteBuffer elem249 = struct.bin;
					oprot.writeBinary(elem249);
				}
				if (struct.isSetStr()) {
					String elem250 = struct.Str;
					oprot.writeString(elem250);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, bin_method_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.bin = iprot.readBinary();
					struct.setBinIsSet(true);
				}
				if (incoming.get(1)) {
					struct.Str = iprot.readString();
					struct.setStrIsSet(true);
				}
			}

		}

	}

	public static class bin_method_result implements org.apache.thrift.TBase<bin_method_result, bin_method_result._Fields>, java.io.Serializable, Cloneable, Comparable<bin_method_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bin_method_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
		private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new bin_method_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new bin_method_resultTupleSchemeFactory());
		}

		public java.nio.ByteBuffer success;
		public actual_base.java.api_exception api;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success"),
			API((short)1, "api")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					case 1: // API
						return API;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public bin_method_result() {
		}

		public bin_method_result(
			java.nio.ByteBuffer success,
			actual_base.java.api_exception api) {
			this();
			this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
			this.api = api;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public bin_method_result(bin_method_result other) {
			if (other.isSetSuccess()) {
				this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
			}
			if (other.isSetApi()) {
				this.api = new actual_base.java.api_exception(other.api);
			}
		}

		public bin_method_result deepCopy() {
			return new bin_method_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

			this.api = null;

		}

		public byte[] getSuccess() {
			setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
			return success == null ? null : success.array();
		}

		public java.nio.ByteBuffer bufferForSuccess() {
			return org.apache.thrift.TBaseHelper.copyBinary(success);
		}

		public bin_method_result setSuccess(byte[] success) {
			this.success = success == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(Arrays.copyOf(success, success.length));
			return this;
		}

		public bin_method_result setSuccess(java.nio.ByteBuffer success) {
			this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public actual_base.java.api_exception getApi() {
			return this.api;
		}

		public bin_method_result setApi(actual_base.java.api_exception api) {
			this.api = api;
			return this;
		}

		public void unsetApi() {
			this.api = null;
		}

		/** Returns true if field api is set (has been assigned a value) and false otherwise */
		public boolean isSetApi() {
			return this.api != null;
		}

		public void setApiIsSet(boolean value) {
			if (!value) {
				this.api = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.nio.ByteBuffer)value);
				}
				break;

			case API:
				if (value == null) {
					unsetApi();
				} else {
					setApi((actual_base.java.api_exception)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case API:
				return getApi();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case API:
				return isSetApi();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof bin_method_result)
				return this.equals((bin_method_result)that);
			return false;
		}

		public boolean equals(bin_method_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_api = true && this.isSetApi();
			boolean that_present_api = true && that.isSetApi();
			if (this_present_api || that_present_api) {
				if (!(this_present_api && that_present_api))
					return false;
				if (!this.api.equals(that.api))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_api = true && (isSetApi());
			list.add(present_api);
			if (present_api)
				list.add(api);

			return list.hashCode();
		}

		@Override
		public int compareTo(bin_method_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetApi()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("bin_method_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				org.apache.thrift.TBaseHelper.toString(this.success, sb);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("api:");
			if (this.api == null) {
				sb.append("null");
			} else {
				sb.append(this.api);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (api != null) {
				api.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class bin_method_resultStandardSchemeFactory implements SchemeFactory {
			public bin_method_resultStandardScheme getScheme() {
				return new bin_method_resultStandardScheme();
			}
		}

		private static class bin_method_resultStandardScheme extends StandardScheme<bin_method_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, bin_method_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readBinary();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 1: // API
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.api = new actual_base.java.api_exception();
								struct.api.read(iprot);
								struct.setApiIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, bin_method_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					java.nio.ByteBuffer elem251 = struct.success;
					oprot.writeBinary(elem251);
					oprot.writeFieldEnd();
				}
				if (struct.api != null) {
					oprot.writeFieldBegin(API_FIELD_DESC);
					struct.api.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class bin_method_resultTupleSchemeFactory implements SchemeFactory {
			public bin_method_resultTupleScheme getScheme() {
				return new bin_method_resultTupleScheme();
			}
		}

		private static class bin_method_resultTupleScheme extends TupleScheme<bin_method_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, bin_method_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetApi()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					java.nio.ByteBuffer elem252 = struct.success;
					oprot.writeBinary(elem252);
				}
				if (struct.isSetApi()) {
					struct.api.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, bin_method_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBinary();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.api = new actual_base.java.api_exception();
					struct.api.read(iprot);
					struct.setApiIsSet(true);
				}
			}

		}

	}

	public static class param_modifiers_args implements org.apache.thrift.TBase<param_modifiers_args, param_modifiers_args._Fields>, java.io.Serializable, Cloneable, Comparable<param_modifiers_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("param_modifiers_args");

		private static final org.apache.thrift.protocol.TField OPT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("opt_num", org.apache.thrift.protocol.TType.I32, (short)1);
		private static final org.apache.thrift.protocol.TField DEFAULT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("default_num", org.apache.thrift.protocol.TType.I32, (short)2);
		private static final org.apache.thrift.protocol.TField REQ_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("req_num", org.apache.thrift.protocol.TType.I32, (short)3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new param_modifiers_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new param_modifiers_argsTupleSchemeFactory());
		}

		public Integer opt_num;
		public Integer default_num;
		public Integer req_num; // required
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			OPT_NUM((short)1, "opt_num"),
			DEFAULT_NUM((short)2, "default_num"),
			REQ_NUM((short)3, "req_num")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // OPT_NUM
						return OPT_NUM;
					case 2: // DEFAULT_NUM
						return DEFAULT_NUM;
					case 3: // REQ_NUM
						return REQ_NUM;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public param_modifiers_args() {
		}

		public param_modifiers_args(
			Integer opt_num,
			Integer default_num,
			Integer req_num) {
			this();
			this.opt_num = opt_num;
			this.default_num = default_num;
			this.req_num = req_num;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public param_modifiers_args(param_modifiers_args other) {
			if (other.isSetOpt_num()) {
				this.opt_num = other.opt_num;
			}
			if (other.isSetDefault_num()) {
				this.default_num = other.default_num;
			}
			if (other.isSetReq_num()) {
				this.req_num = other.req_num;
			}
		}

		public param_modifiers_args deepCopy() {
			return new param_modifiers_args(this);
		}

		@Override
		public void clear() {
			this.opt_num = null;

			this.default_num = null;

			this.req_num = null;

		}

		public Integer getOpt_num() {
			return this.opt_num;
		}

		public param_modifiers_args setOpt_num(Integer opt_num) {
			this.opt_num = opt_num;
			return this;
		}

		public void unsetOpt_num() {
			this.opt_num = null;
		}

		/** Returns true if field opt_num is set (has been assigned a value) and false otherwise */
		public boolean isSetOpt_num() {
			return this.opt_num != null;
		}

		public void setOpt_numIsSet(boolean value) {
			if (!value) {
				this.opt_num = null;
			}
		}

		public Integer getDefault_num() {
			return this.default_num;
		}

		public param_modifiers_args setDefault_num(Integer default_num) {
			this.default_num = default_num;
			return this;
		}

		public void unsetDefault_num() {
			this.default_num = null;
		}

		/** Returns true if field default_num is set (has been assigned a value) and false otherwise */
		public boolean isSetDefault_num() {
			return this.default_num != null;
		}

		public void setDefault_numIsSet(boolean value) {
			if (!value) {
				this.default_num = null;
			}
		}

		public Integer getReq_num() {
			return this.req_num;
		}

		public param_modifiers_args setReq_num(Integer req_num) {
			this.req_num = req_num;
			return this;
		}

		public void unsetReq_num() {
			this.req_num = null;
		}

		/** Returns true if field req_num is set (has been assigned a value) and false otherwise */
		public boolean isSetReq_num() {
			return this.req_num != null;
		}

		public void setReq_numIsSet(boolean value) {
			if (!value) {
				this.req_num = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case OPT_NUM:
				if (value == null) {
					unsetOpt_num();
				} else {
					setOpt_num((Integer)value);
				}
				break;

			case DEFAULT_NUM:
				if (value == null) {
					unsetDefault_num();
				} else {
					setDefault_num((Integer)value);
				}
				break;

			case REQ_NUM:
				if (value == null) {
					unsetReq_num();
				} else {
					setReq_num((Integer)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case OPT_NUM:
				return getOpt_num();

			case DEFAULT_NUM:
				return getDefault_num();

			case REQ_NUM:
				return getReq_num();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case OPT_NUM:
				return isSetOpt_num();
			case DEFAULT_NUM:
				return isSetDefault_num();
			case REQ_NUM:
				return isSetReq_num();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof param_modifiers_args)
				return this.equals((param_modifiers_args)that);
			return false;
		}

		public boolean equals(param_modifiers_args that) {
			if (that == null)
				return false;

			boolean this_present_opt_num = true && this.isSetOpt_num();
			boolean that_present_opt_num = true && that.isSetOpt_num();
			if (this_present_opt_num || that_present_opt_num) {
				if (!(this_present_opt_num && that_present_opt_num))
					return false;
				if (!this.opt_num.equals(that.opt_num))
					return false;
			}

			boolean this_present_default_num = true && this.isSetDefault_num();
			boolean that_present_default_num = true && that.isSetDefault_num();
			if (this_present_default_num || that_present_default_num) {
				if (!(this_present_default_num && that_present_default_num))
					return false;
				if (!this.default_num.equals(that.default_num))
					return false;
			}

			boolean this_present_req_num = true && this.isSetReq_num();
			boolean that_present_req_num = true && that.isSetReq_num();
			if (this_present_req_num || that_present_req_num) {
				if (!(this_present_req_num && that_present_req_num))
					return false;
				if (!this.req_num.equals(that.req_num))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_opt_num = true && (isSetOpt_num());
			list.add(present_opt_num);
			if (present_opt_num)
				list.add(opt_num);

			boolean present_default_num = true && (isSetDefault_num());
			list.add(present_default_num);
			if (present_default_num)
				list.add(default_num);

			boolean present_req_num = true && (isSetReq_num());
			list.add(present_req_num);
			if (present_req_num)
				list.add(req_num);

			return list.hashCode();
		}

		@Override
		public int compareTo(param_modifiers_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetOpt_num()).compareTo(other.isSetOpt_num());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetOpt_num()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt_num, other.opt_num);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetDefault_num()).compareTo(other.isSetDefault_num());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetDefault_num()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_num, other.default_num);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetReq_num()).compareTo(other.isSetReq_num());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReq_num()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req_num, other.req_num);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("param_modifiers_args(");
			boolean first = true;

			sb.append("opt_num:");
			if (this.opt_num == null) {
				sb.append("null");
			} else {
				sb.append(this.opt_num);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("default_num:");
			if (this.default_num == null) {
				sb.append("null");
			} else {
				sb.append(this.default_num);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("req_num:");
			if (this.req_num == null) {
				sb.append("null");
			} else {
				sb.append(this.req_num);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			if (req_num == null) {
				throw new org.apache.thrift.protocol.TProtocolException("Required field 'req_num' is not present in struct 'param_modifiers_args'");
			}
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class param_modifiers_argsStandardSchemeFactory implements SchemeFactory {
			public param_modifiers_argsStandardScheme getScheme() {
				return new param_modifiers_argsStandardScheme();
			}
		}

		private static class param_modifiers_argsStandardScheme extends StandardScheme<param_modifiers_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, param_modifiers_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // OPT_NUM
							if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
								struct.opt_num = iprot.readI32();
								struct.setOpt_numIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // DEFAULT_NUM
							if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
								struct.default_num = iprot.readI32();
								struct.setDefault_numIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 3: // REQ_NUM
							if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
								struct.req_num = iprot.readI32();
								struct.setReq_numIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, param_modifiers_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(OPT_NUM_FIELD_DESC);
				Integer elem253 = struct.opt_num;
				if (elem253 == null) {
					elem253 = 0;
				}
				oprot.writeI32(elem253);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(DEFAULT_NUM_FIELD_DESC);
				Integer elem254 = struct.default_num;
				if (elem254 == null) {
					elem254 = 0;
				}
				oprot.writeI32(elem254);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(REQ_NUM_FIELD_DESC);
				Integer elem255 = struct.req_num;
				if (elem255 == null) {
					elem255 = 0;
				}
				oprot.writeI32(elem255);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class param_modifiers_argsTupleSchemeFactory implements SchemeFactory {
			public param_modifiers_argsTupleScheme getScheme() {
				return new param_modifiers_argsTupleScheme();
			}
		}

		private static class param_modifiers_argsTupleScheme extends TupleScheme<param_modifiers_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, param_modifiers_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				Integer elem256 = struct.req_num;
				if (elem256 == null) {
					elem256 = 0;
				}
				oprot.writeI32(elem256);
				BitSet optionals = new BitSet();
				if (struct.isSetOpt_num()) {
					optionals.set(0);
				}
				if (struct.isSetDefault_num()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetOpt_num()) {
					Integer elem257 = struct.opt_num;
					if (elem257 == null) {
						elem257 = 0;
					}
					oprot.writeI32(elem257);
				}
				if (struct.isSetDefault_num()) {
					Integer elem258 = struct.default_num;
					if (elem258 == null) {
						elem258 = 0;
					}
					oprot.writeI32(elem258);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, param_modifiers_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				struct.req_num = iprot.readI32();
				struct.setReq_numIsSet(true);
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.opt_num = iprot.readI32();
					struct.setOpt_numIsSet(true);
				}
				if (incoming.get(1)) {
					struct.default_num = iprot.readI32();
					struct.setDefault_numIsSet(true);
				}
			}

		}

	}

	public static class param_modifiers_result implements org.apache.thrift.TBase<param_modifiers_result, param_modifiers_result._Fields>, java.io.Serializable, Cloneable, Comparable<param_modifiers_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("param_modifiers_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new param_modifiers_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new param_modifiers_resultTupleSchemeFactory());
		}

		public Long success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public param_modifiers_result() {
		}

		public param_modifiers_result(
			Long success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public param_modifiers_result(param_modifiers_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public param_modifiers_result deepCopy() {
			return new param_modifiers_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public Long getSuccess() {
			return this.success;
		}

		public param_modifiers_result setSuccess(Long success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof param_modifiers_result)
				return this.equals((param_modifiers_result)that);
			return false;
		}

		public boolean equals(param_modifiers_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(param_modifiers_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("param_modifiers_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class param_modifiers_resultStandardSchemeFactory implements SchemeFactory {
			public param_modifiers_resultStandardScheme getScheme() {
				return new param_modifiers_resultStandardScheme();
			}
		}

		private static class param_modifiers_resultStandardScheme extends StandardScheme<param_modifiers_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, param_modifiers_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
								struct.success = iprot.readI64();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, param_modifiers_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					Long elem259 = struct.success;
					if (elem259 == null) {
						elem259 = 0L;
					}
					oprot.writeI64(elem259);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class param_modifiers_resultTupleSchemeFactory implements SchemeFactory {
			public param_modifiers_resultTupleScheme getScheme() {
				return new param_modifiers_resultTupleScheme();
			}
		}

		private static class param_modifiers_resultTupleScheme extends TupleScheme<param_modifiers_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, param_modifiers_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					Long elem260 = struct.success;
					if (elem260 == null) {
						elem260 = 0L;
					}
					oprot.writeI64(elem260);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, param_modifiers_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class underlying_types_test_args implements org.apache.thrift.TBase<underlying_types_test_args, underlying_types_test_args._Fields>, java.io.Serializable, Cloneable, Comparable<underlying_types_test_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("underlying_types_test_args");

		private static final org.apache.thrift.protocol.TField LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("list_type", org.apache.thrift.protocol.TType.LIST, (short)1);
		private static final org.apache.thrift.protocol.TField SET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("set_type", org.apache.thrift.protocol.TType.SET, (short)2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new underlying_types_test_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new underlying_types_test_argsTupleSchemeFactory());
		}

		public java.util.List<Long> list_type;
		public java.util.Set<Long> set_type;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LIST_TYPE((short)1, "list_type"),
			SET_TYPE((short)2, "set_type")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // LIST_TYPE
						return LIST_TYPE;
					case 2: // SET_TYPE
						return SET_TYPE;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public underlying_types_test_args() {
		}

		public underlying_types_test_args(
			java.util.List<Long> list_type,
			java.util.Set<Long> set_type) {
			this();
			this.list_type = list_type;
			this.set_type = set_type;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public underlying_types_test_args(underlying_types_test_args other) {
			if (other.isSetList_type()) {
				this.list_type = new ArrayList<Long>(other.list_type.size());
				for (Long elem261 : other.list_type) {
					Long elem262 = elem261;
					this.list_type.add(elem262);
				}
			}
			if (other.isSetSet_type()) {
				this.set_type = new HashSet<Long>(other.set_type.size());
				for (Long elem263 : other.set_type) {
					Long elem264 = elem263;
					this.set_type.add(elem264);
				}
			}
		}

		public underlying_types_test_args deepCopy() {
			return new underlying_types_test_args(this);
		}

		@Override
		public void clear() {
			this.list_type = null;

			this.set_type = null;

		}

		public int getList_typeSize() {
			return (this.list_type == null) ? 0 : this.list_type.size();
		}

		public java.util.Iterator<Long> getList_typeIterator() {
			return (this.list_type == null) ? null : this.list_type.iterator();
		}

		public void addToList_type(Long elem) {
			if (this.list_type == null) {
				this.list_type = new ArrayList<Long>();
			}
			this.list_type.add(elem);
		}

		public java.util.List<Long> getList_type() {
			return this.list_type;
		}

		public underlying_types_test_args setList_type(java.util.List<Long> list_type) {
			this.list_type = list_type;
			return this;
		}

		public void unsetList_type() {
			this.list_type = null;
		}

		/** Returns true if field list_type is set (has been assigned a value) and false otherwise */
		public boolean isSetList_type() {
			return this.list_type != null;
		}

		public void setList_typeIsSet(boolean value) {
			if (!value) {
				this.list_type = null;
			}
		}

		public int getSet_typeSize() {
			return (this.set_type == null) ? 0 : this.set_type.size();
		}

		public java.util.Iterator<Long> getSet_typeIterator() {
			return (this.set_type == null) ? null : this.set_type.iterator();
		}

		public void addToSet_type(Long elem) {
			if (this.set_type == null) {
				this.set_type = new HashSet<Long>();
			}
			this.set_type.add(elem);
		}

		public java.util.Set<Long> getSet_type() {
			return this.set_type;
		}

		public underlying_types_test_args setSet_type(java.util.Set<Long> set_type) {
			this.set_type = set_type;
			return this;
		}

		public void unsetSet_type() {
			this.set_type = null;
		}

		/** Returns true if field set_type is set (has been assigned a value) and false otherwise */
		public boolean isSetSet_type() {
			return this.set_type != null;
		}

		public void setSet_typeIsSet(boolean value) {
			if (!value) {
				this.set_type = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LIST_TYPE:
				if (value == null) {
					unsetList_type();
				} else {
					setList_type((java.util.List<Long>)value);
				}
				break;

			case SET_TYPE:
				if (value == null) {
					unsetSet_type();
				} else {
					setSet_type((java.util.Set<Long>)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LIST_TYPE:
				return getList_type();

			case SET_TYPE:
				return getSet_type();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LIST_TYPE:
				return isSetList_type();
			case SET_TYPE:
				return isSetSet_type();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof underlying_types_test_args)
				return this.equals((underlying_types_test_args)that);
			return false;
		}

		public boolean equals(underlying_types_test_args that) {
			if (that == null)
				return false;

			boolean this_present_list_type = true && this.isSetList_type();
			boolean that_present_list_type = true && that.isSetList_type();
			if (this_present_list_type || that_present_list_type) {
				if (!(this_present_list_type && that_present_list_type))
					return false;
				if (!this.list_type.equals(that.list_type))
					return false;
			}

			boolean this_present_set_type = true && this.isSetSet_type();
			boolean that_present_set_type = true && that.isSetSet_type();
			if (this_present_set_type || that_present_set_type) {
				if (!(this_present_set_type && that_present_set_type))
					return false;
				if (!this.set_type.equals(that.set_type))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_list_type = true && (isSetList_type());
			list.add(present_list_type);
			if (present_list_type)
				list.add(list_type);

			boolean present_set_type = true && (isSetSet_type());
			list.add(present_set_type);
			if (present_set_type)
				list.add(set_type);

			return list.hashCode();
		}

		@Override
		public int compareTo(underlying_types_test_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetList_type()).compareTo(other.isSetList_type());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetList_type()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_type, other.list_type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSet_type()).compareTo(other.isSetSet_type());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSet_type()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_type, other.set_type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("underlying_types_test_args(");
			boolean first = true;

			sb.append("list_type:");
			if (this.list_type == null) {
				sb.append("null");
			} else {
				sb.append(this.list_type);
			}
			first = false;
			if (!first) sb.append(", ");
			sb.append("set_type:");
			if (this.set_type == null) {
				sb.append("null");
			} else {
				sb.append(this.set_type);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class underlying_types_test_argsStandardSchemeFactory implements SchemeFactory {
			public underlying_types_test_argsStandardScheme getScheme() {
				return new underlying_types_test_argsStandardScheme();
			}
		}

		private static class underlying_types_test_argsStandardScheme extends StandardScheme<underlying_types_test_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, underlying_types_test_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // LIST_TYPE
							if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
								org.apache.thrift.protocol.TList elem265 = iprot.readListBegin();
								struct.list_type = new ArrayList<Long>(elem265.size);
								for (int elem266 = 0; elem266 < elem265.size; ++elem266) {
									Long elem267 = iprot.readI64();
									struct.list_type.add(elem267);
								}
								iprot.readListEnd();
								struct.setList_typeIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						case 2: // SET_TYPE
							if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
								org.apache.thrift.protocol.TSet elem268 = iprot.readSetBegin();
								struct.set_type = new HashSet<Long>(2*elem268.size);
								for (int elem269 = 0; elem269 < elem268.size; ++elem269) {
									Long elem270 = iprot.readI64();
									struct.set_type.add(elem270);
								}
								iprot.readSetEnd();
								struct.setSet_typeIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, underlying_types_test_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.list_type != null) {
					oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.list_type.size()));
					for (Long elem271 : struct.list_type) {
						Long elem272 = elem271;
						if (elem272 == null) {
							elem272 = 0L;
						}
						oprot.writeI64(elem272);
					}
					oprot.writeListEnd();
					oprot.writeFieldEnd();
				}
				if (struct.set_type != null) {
					oprot.writeFieldBegin(SET_TYPE_FIELD_DESC);
					oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.set_type.size()));
					for (Long elem273 : struct.set_type) {
						Long elem274 = elem273;
						if (elem274 == null) {
							elem274 = 0L;
						}
						oprot.writeI64(elem274);
					}
					oprot.writeSetEnd();
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class underlying_types_test_argsTupleSchemeFactory implements SchemeFactory {
			public underlying_types_test_argsTupleScheme getScheme() {
				return new underlying_types_test_argsTupleScheme();
			}
		}

		private static class underlying_types_test_argsTupleScheme extends TupleScheme<underlying_types_test_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, underlying_types_test_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetList_type()) {
					optionals.set(0);
				}
				if (struct.isSetSet_type()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetList_type()) {
					oprot.writeI32(struct.list_type.size());
					for (Long elem275 : struct.list_type) {
						Long elem276 = elem275;
						if (elem276 == null) {
							elem276 = 0L;
						}
						oprot.writeI64(elem276);
					}
				}
				if (struct.isSetSet_type()) {
					oprot.writeI32(struct.set_type.size());
					for (Long elem277 : struct.set_type) {
						Long elem278 = elem277;
						if (elem278 == null) {
							elem278 = 0L;
						}
						oprot.writeI64(elem278);
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, underlying_types_test_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					org.apache.thrift.protocol.TList elem279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
					struct.list_type = new ArrayList<Long>(elem279.size);
					for (int elem280 = 0; elem280 < elem279.size; ++elem280) {
						Long elem281 = iprot.readI64();
						struct.list_type.add(elem281);
					}
					struct.setList_typeIsSet(true);
				}
				if (incoming.get(1)) {
					org.apache.thrift.protocol.TSet elem282 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
					struct.set_type = new HashSet<Long>(2*elem282.size);
					for (int elem283 = 0; elem283 < elem282.size; ++elem283) {
						Long elem284 = iprot.readI64();
						struct.set_type.add(elem284);
					}
					struct.setSet_typeIsSet(true);
				}
			}

		}

	}

	public static class underlying_types_test_result implements org.apache.thrift.TBase<underlying_types_test_result, underlying_types_test_result._Fields>, java.io.Serializable, Cloneable, Comparable<underlying_types_test_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("underlying_types_test_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new underlying_types_test_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new underlying_types_test_resultTupleSchemeFactory());
		}

		public java.util.List<Long> success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public underlying_types_test_result() {
		}

		public underlying_types_test_result(
			java.util.List<Long> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public underlying_types_test_result(underlying_types_test_result other) {
			if (other.isSetSuccess()) {
				this.success = new ArrayList<Long>(other.success.size());
				for (Long elem285 : other.success) {
					Long elem286 = elem285;
					this.success.add(elem286);
				}
			}
		}

		public underlying_types_test_result deepCopy() {
			return new underlying_types_test_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<Long> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(Long elem) {
			if (this.success == null) {
				this.success = new ArrayList<Long>();
			}
			this.success.add(elem);
		}

		public java.util.List<Long> getSuccess() {
			return this.success;
		}

		public underlying_types_test_result setSuccess(java.util.List<Long> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((java.util.List<Long>)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof underlying_types_test_result)
				return this.equals((underlying_types_test_result)that);
			return false;
		}

		public boolean equals(underlying_types_test_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(underlying_types_test_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("underlying_types_test_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class underlying_types_test_resultStandardSchemeFactory implements SchemeFactory {
			public underlying_types_test_resultStandardScheme getScheme() {
				return new underlying_types_test_resultStandardScheme();
			}
		}

		private static class underlying_types_test_resultStandardScheme extends StandardScheme<underlying_types_test_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, underlying_types_test_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
								org.apache.thrift.protocol.TList elem287 = iprot.readListBegin();
								struct.success = new ArrayList<Long>(elem287.size);
								for (int elem288 = 0; elem288 < elem287.size; ++elem288) {
									Long elem289 = iprot.readI64();
									struct.success.add(elem289);
								}
								iprot.readListEnd();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, underlying_types_test_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
					for (Long elem290 : struct.success) {
						Long elem291 = elem290;
						if (elem291 == null) {
							elem291 = 0L;
						}
						oprot.writeI64(elem291);
					}
					oprot.writeListEnd();
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class underlying_types_test_resultTupleSchemeFactory implements SchemeFactory {
			public underlying_types_test_resultTupleScheme getScheme() {
				return new underlying_types_test_resultTupleScheme();
			}
		}

		private static class underlying_types_test_resultTupleScheme extends TupleScheme<underlying_types_test_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, underlying_types_test_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.size());
					for (Long elem292 : struct.success) {
						Long elem293 = elem292;
						if (elem293 == null) {
							elem293 = 0L;
						}
						oprot.writeI64(elem293);
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, underlying_types_test_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					org.apache.thrift.protocol.TList elem294 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
					struct.success = new ArrayList<Long>(elem294.size);
					for (int elem295 = 0; elem295 < elem294.size; ++elem295) {
						Long elem296 = iprot.readI64();
						struct.success.add(elem296);
					}
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class getThing_args implements org.apache.thrift.TBase<getThing_args, getThing_args._Fields>, java.io.Serializable, Cloneable, Comparable<getThing_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThing_args");


		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getThing_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getThing_argsTupleSchemeFactory());
		}

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public getThing_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getThing_args(getThing_args other) {
		}

		public getThing_args deepCopy() {
			return new getThing_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getThing_args)
				return this.equals((getThing_args)that);
			return false;
		}

		public boolean equals(getThing_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(getThing_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getThing_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getThing_argsStandardSchemeFactory implements SchemeFactory {
			public getThing_argsStandardScheme getScheme() {
				return new getThing_argsStandardScheme();
			}
		}

		private static class getThing_argsStandardScheme extends StandardScheme<getThing_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getThing_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getThing_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getThing_argsTupleSchemeFactory implements SchemeFactory {
			public getThing_argsTupleScheme getScheme() {
				return new getThing_argsTupleScheme();
			}
		}

		private static class getThing_argsTupleScheme extends TupleScheme<getThing_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getThing_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getThing_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}

		}

	}

	public static class getThing_result implements org.apache.thrift.TBase<getThing_result, getThing_result._Fields>, java.io.Serializable, Cloneable, Comparable<getThing_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getThing_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getThing_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getThing_resultTupleSchemeFactory());
		}

		public Thing success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public getThing_result() {
		}

		public getThing_result(
			Thing success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getThing_result(getThing_result other) {
			if (other.isSetSuccess()) {
				this.success = new Thing(other.success);
			}
		}

		public getThing_result deepCopy() {
			return new getThing_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public Thing getSuccess() {
			return this.success;
		}

		public getThing_result setSuccess(Thing success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Thing)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getThing_result)
				return this.equals((getThing_result)that);
			return false;
		}

		public boolean equals(getThing_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getThing_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getThing_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getThing_resultStandardSchemeFactory implements SchemeFactory {
			public getThing_resultStandardScheme getScheme() {
				return new getThing_resultStandardScheme();
			}
		}

		private static class getThing_resultStandardScheme extends StandardScheme<getThing_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getThing_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new Thing();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getThing_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getThing_resultTupleSchemeFactory implements SchemeFactory {
			public getThing_resultTupleScheme getScheme() {
				return new getThing_resultTupleScheme();
			}
		}

		private static class getThing_resultTupleScheme extends TupleScheme<getThing_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getThing_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getThing_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new Thing();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class getMyInt_args implements org.apache.thrift.TBase<getMyInt_args, getMyInt_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyInt_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyInt_args");


		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getMyInt_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getMyInt_argsTupleSchemeFactory());
		}

		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public getMyInt_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMyInt_args(getMyInt_args other) {
		}

		public getMyInt_args deepCopy() {
			return new getMyInt_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getMyInt_args)
				return this.equals((getMyInt_args)that);
			return false;
		}

		public boolean equals(getMyInt_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		@Override
		public int compareTo(getMyInt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getMyInt_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMyInt_argsStandardSchemeFactory implements SchemeFactory {
			public getMyInt_argsStandardScheme getScheme() {
				return new getMyInt_argsStandardScheme();
			}
		}

		private static class getMyInt_argsStandardScheme extends StandardScheme<getMyInt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMyInt_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMyInt_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMyInt_argsTupleSchemeFactory implements SchemeFactory {
			public getMyInt_argsTupleScheme getScheme() {
				return new getMyInt_argsTupleScheme();
			}
		}

		private static class getMyInt_argsTupleScheme extends TupleScheme<getMyInt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMyInt_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMyInt_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}

		}

	}

	public static class getMyInt_result implements org.apache.thrift.TBase<getMyInt_result, getMyInt_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyInt_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyInt_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getMyInt_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getMyInt_resultTupleSchemeFactory());
		}

		public Integer success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public getMyInt_result() {
		}

		public getMyInt_result(
			Integer success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMyInt_result(getMyInt_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getMyInt_result deepCopy() {
			return new getMyInt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public Integer getSuccess() {
			return this.success;
		}

		public getMyInt_result setSuccess(Integer success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getMyInt_result)
				return this.equals((getMyInt_result)that);
			return false;
		}

		public boolean equals(getMyInt_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getMyInt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getMyInt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMyInt_resultStandardSchemeFactory implements SchemeFactory {
			public getMyInt_resultStandardScheme getScheme() {
				return new getMyInt_resultStandardScheme();
			}
		}

		private static class getMyInt_resultStandardScheme extends StandardScheme<getMyInt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMyInt_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
								struct.success = iprot.readI32();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMyInt_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					Integer elem297 = struct.success;
					if (elem297 == null) {
						elem297 = 0;
					}
					oprot.writeI32(elem297);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMyInt_resultTupleSchemeFactory implements SchemeFactory {
			public getMyInt_resultTupleScheme getScheme() {
				return new getMyInt_resultTupleScheme();
			}
		}

		private static class getMyInt_resultTupleScheme extends TupleScheme<getMyInt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMyInt_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					Integer elem298 = struct.success;
					if (elem298 == null) {
						elem298 = 0;
					}
					oprot.writeI32(elem298);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMyInt_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class use_subdir_struct_args implements org.apache.thrift.TBase<use_subdir_struct_args, use_subdir_struct_args._Fields>, java.io.Serializable, Cloneable, Comparable<use_subdir_struct_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("use_subdir_struct_args");

		private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new use_subdir_struct_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new use_subdir_struct_argsTupleSchemeFactory());
		}

		public A a;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			A((short)1, "a")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // A
						return A;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public use_subdir_struct_args() {
		}

		public use_subdir_struct_args(
			A a) {
			this();
			this.a = a;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public use_subdir_struct_args(use_subdir_struct_args other) {
			if (other.isSetA()) {
				this.a = new A(other.a);
			}
		}

		public use_subdir_struct_args deepCopy() {
			return new use_subdir_struct_args(this);
		}

		@Override
		public void clear() {
			this.a = null;

		}

		public A getA() {
			return this.a;
		}

		public use_subdir_struct_args setA(A a) {
			this.a = a;
			return this;
		}

		public void unsetA() {
			this.a = null;
		}

		/** Returns true if field a is set (has been assigned a value) and false otherwise */
		public boolean isSetA() {
			return this.a != null;
		}

		public void setAIsSet(boolean value) {
			if (!value) {
				this.a = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case A:
				if (value == null) {
					unsetA();
				} else {
					setA((A)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case A:
				return getA();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case A:
				return isSetA();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof use_subdir_struct_args)
				return this.equals((use_subdir_struct_args)that);
			return false;
		}

		public boolean equals(use_subdir_struct_args that) {
			if (that == null)
				return false;

			boolean this_present_a = true && this.isSetA();
			boolean that_present_a = true && that.isSetA();
			if (this_present_a || that_present_a) {
				if (!(this_present_a && that_present_a))
					return false;
				if (!this.a.equals(that.a))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_a = true && (isSetA());
			list.add(present_a);
			if (present_a)
				list.add(a);

			return list.hashCode();
		}

		@Override
		public int compareTo(use_subdir_struct_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetA()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("use_subdir_struct_args(");
			boolean first = true;

			sb.append("a:");
			if (this.a == null) {
				sb.append("null");
			} else {
				sb.append(this.a);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (a != null) {
				a.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class use_subdir_struct_argsStandardSchemeFactory implements SchemeFactory {
			public use_subdir_struct_argsStandardScheme getScheme() {
				return new use_subdir_struct_argsStandardScheme();
			}
		}

		private static class use_subdir_struct_argsStandardScheme extends StandardScheme<use_subdir_struct_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_struct_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // A
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.a = new A();
								struct.a.read(iprot);
								struct.setAIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, use_subdir_struct_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.a != null) {
					oprot.writeFieldBegin(A_FIELD_DESC);
					struct.a.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class use_subdir_struct_argsTupleSchemeFactory implements SchemeFactory {
			public use_subdir_struct_argsTupleScheme getScheme() {
				return new use_subdir_struct_argsTupleScheme();
			}
		}

		private static class use_subdir_struct_argsTupleScheme extends TupleScheme<use_subdir_struct_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, use_subdir_struct_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetA()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetA()) {
					struct.a.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, use_subdir_struct_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.a = new A();
					struct.a.read(iprot);
					struct.setAIsSet(true);
				}
			}

		}

	}

	public static class use_subdir_struct_result implements org.apache.thrift.TBase<use_subdir_struct_result, use_subdir_struct_result._Fields>, java.io.Serializable, Cloneable, Comparable<use_subdir_struct_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("use_subdir_struct_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new use_subdir_struct_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new use_subdir_struct_resultTupleSchemeFactory());
		}

		public A success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public use_subdir_struct_result() {
		}

		public use_subdir_struct_result(
			A success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public use_subdir_struct_result(use_subdir_struct_result other) {
			if (other.isSetSuccess()) {
				this.success = new A(other.success);
			}
		}

		public use_subdir_struct_result deepCopy() {
			return new use_subdir_struct_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public A getSuccess() {
			return this.success;
		}

		public use_subdir_struct_result setSuccess(A success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((A)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof use_subdir_struct_result)
				return this.equals((use_subdir_struct_result)that);
			return false;
		}

		public boolean equals(use_subdir_struct_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(use_subdir_struct_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("use_subdir_struct_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class use_subdir_struct_resultStandardSchemeFactory implements SchemeFactory {
			public use_subdir_struct_resultStandardScheme getScheme() {
				return new use_subdir_struct_resultStandardScheme();
			}
		}

		private static class use_subdir_struct_resultStandardScheme extends StandardScheme<use_subdir_struct_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, use_subdir_struct_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new A();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, use_subdir_struct_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class use_subdir_struct_resultTupleSchemeFactory implements SchemeFactory {
			public use_subdir_struct_resultTupleScheme getScheme() {
				return new use_subdir_struct_resultTupleScheme();
			}
		}

		private static class use_subdir_struct_resultTupleScheme extends TupleScheme<use_subdir_struct_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, use_subdir_struct_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, use_subdir_struct_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new A();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class sayHelloWith_args implements org.apache.thrift.TBase<sayHelloWith_args, sayHelloWith_args._Fields>, java.io.Serializable, Cloneable, Comparable<sayHelloWith_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sayHelloWith_args");

		private static final org.apache.thrift.protocol.TField NEW_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("newMessage", org.apache.thrift.protocol.TType.STRING, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new sayHelloWith_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sayHelloWith_argsTupleSchemeFactory());
		}

		public String newMessage;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			NEW_MESSAGE((short)1, "newMessage")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // NEW_MESSAGE
						return NEW_MESSAGE;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public sayHelloWith_args() {
		}

		public sayHelloWith_args(
			String newMessage) {
			this();
			this.newMessage = newMessage;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayHelloWith_args(sayHelloWith_args other) {
			if (other.isSetNewMessage()) {
				this.newMessage = other.newMessage;
			}
		}

		public sayHelloWith_args deepCopy() {
			return new sayHelloWith_args(this);
		}

		@Override
		public void clear() {
			this.newMessage = null;

		}

		public String getNewMessage() {
			return this.newMessage;
		}

		public sayHelloWith_args setNewMessage(String newMessage) {
			this.newMessage = newMessage;
			return this;
		}

		public void unsetNewMessage() {
			this.newMessage = null;
		}

		/** Returns true if field newMessage is set (has been assigned a value) and false otherwise */
		public boolean isSetNewMessage() {
			return this.newMessage != null;
		}

		public void setNewMessageIsSet(boolean value) {
			if (!value) {
				this.newMessage = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case NEW_MESSAGE:
				if (value == null) {
					unsetNewMessage();
				} else {
					setNewMessage((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case NEW_MESSAGE:
				return getNewMessage();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case NEW_MESSAGE:
				return isSetNewMessage();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayHelloWith_args)
				return this.equals((sayHelloWith_args)that);
			return false;
		}

		public boolean equals(sayHelloWith_args that) {
			if (that == null)
				return false;

			boolean this_present_newMessage = true && this.isSetNewMessage();
			boolean that_present_newMessage = true && that.isSetNewMessage();
			if (this_present_newMessage || that_present_newMessage) {
				if (!(this_present_newMessage && that_present_newMessage))
					return false;
				if (!this.newMessage.equals(that.newMessage))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_newMessage = true && (isSetNewMessage());
			list.add(present_newMessage);
			if (present_newMessage)
				list.add(newMessage);

			return list.hashCode();
		}

		@Override
		public int compareTo(sayHelloWith_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetNewMessage()).compareTo(other.isSetNewMessage());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNewMessage()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newMessage, other.newMessage);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sayHelloWith_args(");
			boolean first = true;

			sb.append("newMessage:");
			if (this.newMessage == null) {
				sb.append("null");
			} else {
				sb.append(this.newMessage);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayHelloWith_argsStandardSchemeFactory implements SchemeFactory {
			public sayHelloWith_argsStandardScheme getScheme() {
				return new sayHelloWith_argsStandardScheme();
			}
		}

		private static class sayHelloWith_argsStandardScheme extends StandardScheme<sayHelloWith_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayHelloWith_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // NEW_MESSAGE
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.newMessage = iprot.readString();
								struct.setNewMessageIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayHelloWith_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.newMessage != null) {
					oprot.writeFieldBegin(NEW_MESSAGE_FIELD_DESC);
					String elem299 = struct.newMessage;
					oprot.writeString(elem299);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayHelloWith_argsTupleSchemeFactory implements SchemeFactory {
			public sayHelloWith_argsTupleScheme getScheme() {
				return new sayHelloWith_argsTupleScheme();
			}
		}

		private static class sayHelloWith_argsTupleScheme extends TupleScheme<sayHelloWith_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetNewMessage()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetNewMessage()) {
					String elem300 = struct.newMessage;
					oprot.writeString(elem300);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.newMessage = iprot.readString();
					struct.setNewMessageIsSet(true);
				}
			}

		}

	}

	public static class sayHelloWith_result implements org.apache.thrift.TBase<sayHelloWith_result, sayHelloWith_result._Fields>, java.io.Serializable, Cloneable, Comparable<sayHelloWith_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sayHelloWith_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new sayHelloWith_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sayHelloWith_resultTupleSchemeFactory());
		}

		public String success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public sayHelloWith_result() {
		}

		public sayHelloWith_result(
			String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayHelloWith_result(sayHelloWith_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public sayHelloWith_result deepCopy() {
			return new sayHelloWith_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public String getSuccess() {
			return this.success;
		}

		public sayHelloWith_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayHelloWith_result)
				return this.equals((sayHelloWith_result)that);
			return false;
		}

		public boolean equals(sayHelloWith_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sayHelloWith_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sayHelloWith_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayHelloWith_resultStandardSchemeFactory implements SchemeFactory {
			public sayHelloWith_resultStandardScheme getScheme() {
				return new sayHelloWith_resultStandardScheme();
			}
		}

		private static class sayHelloWith_resultStandardScheme extends StandardScheme<sayHelloWith_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayHelloWith_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayHelloWith_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					String elem301 = struct.success;
					oprot.writeString(elem301);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayHelloWith_resultTupleSchemeFactory implements SchemeFactory {
			public sayHelloWith_resultTupleScheme getScheme() {
				return new sayHelloWith_resultTupleScheme();
			}
		}

		private static class sayHelloWith_resultTupleScheme extends TupleScheme<sayHelloWith_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem302 = struct.success;
					oprot.writeString(elem302);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayHelloWith_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class whatDoYouSay_args implements org.apache.thrift.TBase<whatDoYouSay_args, whatDoYouSay_args._Fields>, java.io.Serializable, Cloneable, Comparable<whatDoYouSay_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("whatDoYouSay_args");

		private static final org.apache.thrift.protocol.TField MESSAGE_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageArgs", org.apache.thrift.protocol.TType.STRING, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new whatDoYouSay_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new whatDoYouSay_argsTupleSchemeFactory());
		}

		public String messageArgs;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			MESSAGE_ARGS((short)1, "messageArgs")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // MESSAGE_ARGS
						return MESSAGE_ARGS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public whatDoYouSay_args() {
		}

		public whatDoYouSay_args(
			String messageArgs) {
			this();
			this.messageArgs = messageArgs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public whatDoYouSay_args(whatDoYouSay_args other) {
			if (other.isSetMessageArgs()) {
				this.messageArgs = other.messageArgs;
			}
		}

		public whatDoYouSay_args deepCopy() {
			return new whatDoYouSay_args(this);
		}

		@Override
		public void clear() {
			this.messageArgs = null;

		}

		public String getMessageArgs() {
			return this.messageArgs;
		}

		public whatDoYouSay_args setMessageArgs(String messageArgs) {
			this.messageArgs = messageArgs;
			return this;
		}

		public void unsetMessageArgs() {
			this.messageArgs = null;
		}

		/** Returns true if field messageArgs is set (has been assigned a value) and false otherwise */
		public boolean isSetMessageArgs() {
			return this.messageArgs != null;
		}

		public void setMessageArgsIsSet(boolean value) {
			if (!value) {
				this.messageArgs = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case MESSAGE_ARGS:
				if (value == null) {
					unsetMessageArgs();
				} else {
					setMessageArgs((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case MESSAGE_ARGS:
				return getMessageArgs();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case MESSAGE_ARGS:
				return isSetMessageArgs();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof whatDoYouSay_args)
				return this.equals((whatDoYouSay_args)that);
			return false;
		}

		public boolean equals(whatDoYouSay_args that) {
			if (that == null)
				return false;

			boolean this_present_messageArgs = true && this.isSetMessageArgs();
			boolean that_present_messageArgs = true && that.isSetMessageArgs();
			if (this_present_messageArgs || that_present_messageArgs) {
				if (!(this_present_messageArgs && that_present_messageArgs))
					return false;
				if (!this.messageArgs.equals(that.messageArgs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_messageArgs = true && (isSetMessageArgs());
			list.add(present_messageArgs);
			if (present_messageArgs)
				list.add(messageArgs);

			return list.hashCode();
		}

		@Override
		public int compareTo(whatDoYouSay_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetMessageArgs()).compareTo(other.isSetMessageArgs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMessageArgs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageArgs, other.messageArgs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("whatDoYouSay_args(");
			boolean first = true;

			sb.append("messageArgs:");
			if (this.messageArgs == null) {
				sb.append("null");
			} else {
				sb.append(this.messageArgs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class whatDoYouSay_argsStandardSchemeFactory implements SchemeFactory {
			public whatDoYouSay_argsStandardScheme getScheme() {
				return new whatDoYouSay_argsStandardScheme();
			}
		}

		private static class whatDoYouSay_argsStandardScheme extends StandardScheme<whatDoYouSay_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, whatDoYouSay_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // MESSAGE_ARGS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.messageArgs = iprot.readString();
								struct.setMessageArgsIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, whatDoYouSay_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.messageArgs != null) {
					oprot.writeFieldBegin(MESSAGE_ARGS_FIELD_DESC);
					String elem303 = struct.messageArgs;
					oprot.writeString(elem303);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class whatDoYouSay_argsTupleSchemeFactory implements SchemeFactory {
			public whatDoYouSay_argsTupleScheme getScheme() {
				return new whatDoYouSay_argsTupleScheme();
			}
		}

		private static class whatDoYouSay_argsTupleScheme extends TupleScheme<whatDoYouSay_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetMessageArgs()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetMessageArgs()) {
					String elem304 = struct.messageArgs;
					oprot.writeString(elem304);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.messageArgs = iprot.readString();
					struct.setMessageArgsIsSet(true);
				}
			}

		}

	}

	public static class whatDoYouSay_result implements org.apache.thrift.TBase<whatDoYouSay_result, whatDoYouSay_result._Fields>, java.io.Serializable, Cloneable, Comparable<whatDoYouSay_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("whatDoYouSay_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new whatDoYouSay_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new whatDoYouSay_resultTupleSchemeFactory());
		}

		public String success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public whatDoYouSay_result() {
		}

		public whatDoYouSay_result(
			String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public whatDoYouSay_result(whatDoYouSay_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public whatDoYouSay_result deepCopy() {
			return new whatDoYouSay_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public String getSuccess() {
			return this.success;
		}

		public whatDoYouSay_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof whatDoYouSay_result)
				return this.equals((whatDoYouSay_result)that);
			return false;
		}

		public boolean equals(whatDoYouSay_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(whatDoYouSay_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("whatDoYouSay_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class whatDoYouSay_resultStandardSchemeFactory implements SchemeFactory {
			public whatDoYouSay_resultStandardScheme getScheme() {
				return new whatDoYouSay_resultStandardScheme();
			}
		}

		private static class whatDoYouSay_resultStandardScheme extends StandardScheme<whatDoYouSay_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, whatDoYouSay_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, whatDoYouSay_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					String elem305 = struct.success;
					oprot.writeString(elem305);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class whatDoYouSay_resultTupleSchemeFactory implements SchemeFactory {
			public whatDoYouSay_resultTupleScheme getScheme() {
				return new whatDoYouSay_resultTupleScheme();
			}
		}

		private static class whatDoYouSay_resultTupleScheme extends TupleScheme<whatDoYouSay_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem306 = struct.success;
					oprot.writeString(elem306);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, whatDoYouSay_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

	public static class sayAgain_args implements org.apache.thrift.TBase<sayAgain_args, sayAgain_args._Fields>, java.io.Serializable, Cloneable, Comparable<sayAgain_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sayAgain_args");

		private static final org.apache.thrift.protocol.TField MESSAGE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("messageResult", org.apache.thrift.protocol.TType.STRING, (short)1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new sayAgain_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sayAgain_argsTupleSchemeFactory());
		}

		public String messageResult;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			MESSAGE_RESULT((short)1, "messageResult")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 1: // MESSAGE_RESULT
						return MESSAGE_RESULT;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public sayAgain_args() {
		}

		public sayAgain_args(
			String messageResult) {
			this();
			this.messageResult = messageResult;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayAgain_args(sayAgain_args other) {
			if (other.isSetMessageResult()) {
				this.messageResult = other.messageResult;
			}
		}

		public sayAgain_args deepCopy() {
			return new sayAgain_args(this);
		}

		@Override
		public void clear() {
			this.messageResult = null;

		}

		public String getMessageResult() {
			return this.messageResult;
		}

		public sayAgain_args setMessageResult(String messageResult) {
			this.messageResult = messageResult;
			return this;
		}

		public void unsetMessageResult() {
			this.messageResult = null;
		}

		/** Returns true if field messageResult is set (has been assigned a value) and false otherwise */
		public boolean isSetMessageResult() {
			return this.messageResult != null;
		}

		public void setMessageResultIsSet(boolean value) {
			if (!value) {
				this.messageResult = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case MESSAGE_RESULT:
				if (value == null) {
					unsetMessageResult();
				} else {
					setMessageResult((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case MESSAGE_RESULT:
				return getMessageResult();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case MESSAGE_RESULT:
				return isSetMessageResult();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayAgain_args)
				return this.equals((sayAgain_args)that);
			return false;
		}

		public boolean equals(sayAgain_args that) {
			if (that == null)
				return false;

			boolean this_present_messageResult = true && this.isSetMessageResult();
			boolean that_present_messageResult = true && that.isSetMessageResult();
			if (this_present_messageResult || that_present_messageResult) {
				if (!(this_present_messageResult && that_present_messageResult))
					return false;
				if (!this.messageResult.equals(that.messageResult))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_messageResult = true && (isSetMessageResult());
			list.add(present_messageResult);
			if (present_messageResult)
				list.add(messageResult);

			return list.hashCode();
		}

		@Override
		public int compareTo(sayAgain_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetMessageResult()).compareTo(other.isSetMessageResult());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMessageResult()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageResult, other.messageResult);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sayAgain_args(");
			boolean first = true;

			sb.append("messageResult:");
			if (this.messageResult == null) {
				sb.append("null");
			} else {
				sb.append(this.messageResult);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayAgain_argsStandardSchemeFactory implements SchemeFactory {
			public sayAgain_argsStandardScheme getScheme() {
				return new sayAgain_argsStandardScheme();
			}
		}

		private static class sayAgain_argsStandardScheme extends StandardScheme<sayAgain_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayAgain_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // MESSAGE_RESULT
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.messageResult = iprot.readString();
								struct.setMessageResultIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.messageResult != null) {
					oprot.writeFieldBegin(MESSAGE_RESULT_FIELD_DESC);
					String elem307 = struct.messageResult;
					oprot.writeString(elem307);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayAgain_argsTupleSchemeFactory implements SchemeFactory {
			public sayAgain_argsTupleScheme getScheme() {
				return new sayAgain_argsTupleScheme();
			}
		}

		private static class sayAgain_argsTupleScheme extends TupleScheme<sayAgain_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetMessageResult()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetMessageResult()) {
					String elem308 = struct.messageResult;
					oprot.writeString(elem308);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.messageResult = iprot.readString();
					struct.setMessageResultIsSet(true);
				}
			}

		}

	}

	public static class sayAgain_result implements org.apache.thrift.TBase<sayAgain_result, sayAgain_result._Fields>, java.io.Serializable, Cloneable, Comparable<sayAgain_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sayAgain_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new sayAgain_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new sayAgain_resultTupleSchemeFactory());
		}

		public String success;
		/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short)0, "success")
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch(fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception
			 * if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public sayAgain_result() {
		}

		public sayAgain_result(
			String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayAgain_result(sayAgain_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public sayAgain_result deepCopy() {
			return new sayAgain_result(this);
		}

		@Override
		public void clear() {
			this.success = null;

		}

		public String getSuccess() {
			return this.success;
		}

		public sayAgain_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String)value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayAgain_result)
				return this.equals((sayAgain_result)that);
			return false;
		}

		public boolean equals(sayAgain_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(sayAgain_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("sayAgain_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
				read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayAgain_resultStandardSchemeFactory implements SchemeFactory {
			public sayAgain_resultStandardScheme getScheme() {
				return new sayAgain_resultStandardScheme();
			}
		}

		private static class sayAgain_resultStandardScheme extends StandardScheme<sayAgain_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, sayAgain_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.success = iprot.readString();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, sayAgain_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					String elem309 = struct.success;
					oprot.writeString(elem309);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayAgain_resultTupleSchemeFactory implements SchemeFactory {
			public sayAgain_resultTupleScheme getScheme() {
				return new sayAgain_resultTupleScheme();
			}
		}

		private static class sayAgain_resultTupleScheme extends TupleScheme<sayAgain_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					String elem310 = struct.success;
					oprot.writeString(elem310);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, sayAgain_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}

		}

	}

}