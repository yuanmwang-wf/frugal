// Autogenerated by Frugal Compiler (2.25.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package variety

import (
	"bytes"
	"fmt"

	"github.com/Workiva/frugal/lib/gopherjs/frugal"
	"github.com/Workiva/frugal/lib/gopherjs/thrift"
	"github.com/Workiva/frugal/test/expected/gopherjs/actual_base/golang"
)

const RedefConst = golang.ConstI32FromBase

var ConstThing *golang.Thing

var DEFAULT_ID ID

var OtherDefault ID

const Thirtyfour = 34

var MAPCONSTANT map[string]string

var ConstEvent1 *Event

var ConstEvent2 *Event

var NumsList []int32

var NumsSet map[Int]bool

var MAPCONSTANT2 map[string]*Event

var BinConst []byte

const TrueConstant = true

const FalseConstant = false

const ConstHc = 2

const EvilString = "thin'g\" \""

const EvilString2 = "th'ing\"ad\"f"

var ConstLower *TestLowercase

func init() {
	ConstThing = &golang.Thing{
		AnID:    1,
		AString: "some string",
	}
	DEFAULT_ID = -1
	OtherDefault = DEFAULT_ID
	MAPCONSTANT = map[string]string{
		"hello":     "world",
		"goodnight": "moon",
	}
	ConstEvent1 = &Event{
		ID:      -2,
		Message: "first one",
	}
	ConstEvent2 = &Event{
		ID:      -7,
		Message: "second one",
	}
	NumsList = []int32{
		2,
		4,
		7,
		1,
	}
	NumsSet = map[Int]bool{
		1: true,
		3: true,
		8: true,
		0: true,
	}
	MAPCONSTANT2 = map[string]*Event{
		"hello": &Event{
			ID:      -2,
			Message: "first here",
		},
	}
	BinConst = []byte("hello")
	ConstLower = &TestLowercase{
		LowercaseInt: 2,
	}
}

type ID int64
type Int int32
type Request map[Int]string
type T1String string
type T2String T1String
type HealthCondition int64

const (
	// This docstring gets added to the generated code because it
	// has the @ sign.
	HealthCondition_PASS HealthCondition = 1
	// This docstring also gets added to the generated code
	// because it has the @ sign.
	HealthCondition_WARN HealthCondition = 2
	// Deprecated: use something else
	HealthCondition_FAIL HealthCondition = 3
	// This is a docstring comment for a deprecated enum value that has been
	// spread across two lines.
	// Deprecated: don't use this; use "something else"
	HealthCondition_UNKNOWN HealthCondition = 4
)

func (p HealthCondition) String() string {
	switch p {
	case HealthCondition_PASS:
		return "PASS"
	case HealthCondition_WARN:
		return "WARN"
	case HealthCondition_FAIL:
		return "FAIL"
	case HealthCondition_UNKNOWN:
		return "UNKNOWN"
	}
	return "<UNSET>"
}

func HealthConditionFromString(s string) (HealthCondition, error) {
	switch s {
	case "PASS":
		return HealthCondition_PASS, nil
	case "WARN":
		return HealthCondition_WARN, nil
	case "FAIL":
		return HealthCondition_FAIL, nil
	case "UNKNOWN":
		return HealthCondition_UNKNOWN, nil
	}
	return HealthCondition(0), fmt.Errorf("not a valid HealthCondition string")
}

type ItsAnEnum int64

const (
	ItsAnEnum_FIRST  ItsAnEnum = 2
	ItsAnEnum_SECOND ItsAnEnum = 3
	ItsAnEnum_THIRD  ItsAnEnum = 4
	ItsAnEnum_fourth ItsAnEnum = 5
	ItsAnEnum_Fifth  ItsAnEnum = 6
	ItsAnEnum_sIxItH ItsAnEnum = 7
)

func (p ItsAnEnum) String() string {
	switch p {
	case ItsAnEnum_FIRST:
		return "FIRST"
	case ItsAnEnum_SECOND:
		return "SECOND"
	case ItsAnEnum_THIRD:
		return "THIRD"
	case ItsAnEnum_fourth:
		return "fourth"
	case ItsAnEnum_Fifth:
		return "Fifth"
	case ItsAnEnum_sIxItH:
		return "sIxItH"
	}
	return "<UNSET>"
}

func ItsAnEnumFromString(s string) (ItsAnEnum, error) {
	switch s {
	case "FIRST":
		return ItsAnEnum_FIRST, nil
	case "SECOND":
		return ItsAnEnum_SECOND, nil
	case "THIRD":
		return ItsAnEnum_THIRD, nil
	case "fourth":
		return ItsAnEnum_fourth, nil
	case "Fifth":
		return ItsAnEnum_Fifth, nil
	case "sIxItH":
		return ItsAnEnum_sIxItH, nil
	}
	return ItsAnEnum(0), fmt.Errorf("not a valid ItsAnEnum string")
}

type TestBase struct {
	BaseStruct *golang.Thing
}

func NewTestBase() *TestBase {
	return &TestBase{}
}

var TestBase_BaseStruct_DEFAULT *golang.Thing

func (p *TestBase) IsSetBaseStruct() bool {
	return p.BaseStruct != nil
}

func (p *TestBase) GetBaseStruct() *golang.Thing {
	if !p.IsSetBaseStruct() {
		return TestBase_BaseStruct_DEFAULT
	}
	return p.BaseStruct
}

func (p *TestBase) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			p.BaseStruct = golang.NewThing()
			if err := p.BaseStruct.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseStruct), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TestBase) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestBase"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteStruct(oprot, p.BaseStruct, "base_struct", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::base_struct:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TestBase) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestBase(%+v)", *p)
}

type TestLowercase struct {
	LowercaseInt int32
}

func NewTestLowercase() *TestLowercase {
	return &TestLowercase{}
}

func (p *TestLowercase) GetLowercaseInt() int32 {
	return p.LowercaseInt
}

func (p *TestLowercase) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.LowercaseInt = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TestLowercase) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestLowercase"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI32(oprot, p.LowercaseInt, "lowercaseInt", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::lowercaseInt:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TestLowercase) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestLowercase(%+v)", *p)
}

// This docstring gets added to the generated code because it has
// the @ sign.
type Event struct {
	// ID is a unique identifier for an event.
	ID ID
	// Message contains the event payload.
	Message string
}

func NewEvent() *Event {
	return &Event{
		ID: DEFAULT_ID,
	}
}

func (p *Event) GetID() ID {
	return p.ID
}

func (p *Event) GetMessage() string {
	return p.Message
}

func (p *Event) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.ID = temp
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.Message = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Event) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Event"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI64(oprot, int64(p.ID), "ID", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ID:1 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.Message, "Message", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::Message:2 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Event) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Event(%+v)", *p)
}

type TestingDefaults struct {
	ID2        ID
	Ev1        *Event
	Ev2        *Event
	ID         ID
	Thing      string
	Thing2     string
	Listfield  []Int
	ID3        ID
	BinField   []byte
	BinField2  []byte
	BinField3  []byte
	BinField4  []byte
	List2      *[]Int
	List3      []Int
	List4      []Int
	AMap       *map[string]string
	Status     HealthCondition
	BaseStatus golang.BaseHealthCondition
}

func NewTestingDefaults() *TestingDefaults {
	return &TestingDefaults{
		ID2:    DEFAULT_ID,
		ID:     -2,
		Thing:  "a constant",
		Thing2: "another constant",
		Listfield: []Int{
			1,
			2,
			3,
			4,
			5,
		},
		ID3:       OtherDefault,
		BinField4: BinConst,
		List4: []Int{
			1,
			2,
			3,
			6,
		},
		Status:     HealthCondition_PASS,
		BaseStatus: golang.BaseHealthCondition_FAIL,
	}
}

var TestingDefaults_ID2_DEFAULT ID = DEFAULT_ID

func (p *TestingDefaults) IsSetID2() bool {
	return p.ID2 != TestingDefaults_ID2_DEFAULT
}

func (p *TestingDefaults) GetID2() ID {
	return p.ID2
}

var TestingDefaults_Ev1_DEFAULT *Event = &Event{
	ID:      DEFAULT_ID,
	Message: "a message",
}

func (p *TestingDefaults) IsSetEv1() bool {
	return p.Ev1 != nil
}

func (p *TestingDefaults) GetEv1() *Event {
	if !p.IsSetEv1() {
		return TestingDefaults_Ev1_DEFAULT
	}
	return p.Ev1
}

var TestingDefaults_Ev2_DEFAULT *Event = &Event{
	ID:      5,
	Message: "a message2",
}

func (p *TestingDefaults) IsSetEv2() bool {
	return p.Ev2 != nil
}

func (p *TestingDefaults) GetEv2() *Event {
	if !p.IsSetEv2() {
		return TestingDefaults_Ev2_DEFAULT
	}
	return p.Ev2
}

func (p *TestingDefaults) GetID() ID {
	return p.ID
}

func (p *TestingDefaults) GetThing() string {
	return p.Thing
}

var TestingDefaults_Thing2_DEFAULT string = "another constant"

func (p *TestingDefaults) IsSetThing2() bool {
	return p.Thing2 != TestingDefaults_Thing2_DEFAULT
}

func (p *TestingDefaults) GetThing2() string {
	return p.Thing2
}

func (p *TestingDefaults) GetListfield() []Int {
	return p.Listfield
}

func (p *TestingDefaults) GetID3() ID {
	return p.ID3
}

func (p *TestingDefaults) GetBinField() []byte {
	return p.BinField
}

var TestingDefaults_BinField2_DEFAULT []byte

func (p *TestingDefaults) IsSetBinField2() bool {
	return p.BinField2 != nil
}

func (p *TestingDefaults) GetBinField2() []byte {
	return p.BinField2
}

func (p *TestingDefaults) GetBinField3() []byte {
	return p.BinField3
}

var TestingDefaults_BinField4_DEFAULT []byte = BinConst

func (p *TestingDefaults) IsSetBinField4() bool {
	return !bytes.Equal(p.BinField4, TestingDefaults_BinField4_DEFAULT)
}

func (p *TestingDefaults) GetBinField4() []byte {
	return p.BinField4
}

var TestingDefaults_List2_DEFAULT []Int = []Int{
	1,
	3,
	4,
	5,
	8,
}

func (p *TestingDefaults) IsSetList2() bool {
	return p.List2 != nil
}

func (p *TestingDefaults) GetList2() []Int {
	if !p.IsSetList2() {
		return TestingDefaults_List2_DEFAULT
	}
	return *p.List2
}

var TestingDefaults_List3_DEFAULT []Int

func (p *TestingDefaults) IsSetList3() bool {
	return p.List3 != nil
}

func (p *TestingDefaults) GetList3() []Int {
	return p.List3
}

func (p *TestingDefaults) GetList4() []Int {
	return p.List4
}

var TestingDefaults_AMap_DEFAULT map[string]string = map[string]string{
	"k1": "v1",
	"k2": "v2",
}

func (p *TestingDefaults) IsSetAMap() bool {
	return p.AMap != nil
}

func (p *TestingDefaults) GetAMap() map[string]string {
	if !p.IsSetAMap() {
		return TestingDefaults_AMap_DEFAULT
	}
	return *p.AMap
}

func (p *TestingDefaults) GetStatus() HealthCondition {
	return p.Status
}

func (p *TestingDefaults) GetBaseStatus() golang.BaseHealthCondition {
	return p.BaseStatus
}

func (p *TestingDefaults) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	issetStatus := false
	issetBaseStatus := false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.ID2 = temp
			}
		case 2:
			p.Ev1 = NewEvent()
			if err := p.Ev1.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ev1), err)
			}
		case 3:
			p.Ev2 = NewEvent()
			if err := p.Ev2.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ev2), err)
			}
		case 4:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 4: ", err)
			} else {
				temp := ID(v)
				p.ID = temp
			}
		case 5:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 5: ", err)
			} else {
				p.Thing = v
			}
		case 6:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 6: ", err)
			} else {
				p.Thing2 = v
			}
		case 7:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.Listfield = make([]Int, 0, size)
			for i := 0; i < size; i++ {
				var elem0 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem0 = temp
				}
				p.Listfield = append(p.Listfield, elem0)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 8:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 8: ", err)
			} else {
				temp := ID(v)
				p.ID3 = temp
			}
		case 9:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 9: ", err)
			} else {
				p.BinField = v
			}
		case 10:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 10: ", err)
			} else {
				p.BinField2 = v
			}
		case 11:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 11: ", err)
			} else {
				p.BinField3 = v
			}
		case 12:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 12: ", err)
			} else {
				p.BinField4 = v
			}
		case 13:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			temp := make([]Int, 0, size)
			p.List2 = &temp
			for i := 0; i < size; i++ {
				var elem1 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem1 = temp
				}
				*p.List2 = append(*p.List2, elem1)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 14:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.List3 = make([]Int, 0, size)
			for i := 0; i < size; i++ {
				var elem2 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem2 = temp
				}
				p.List3 = append(p.List3, elem2)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 15:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.List4 = make([]Int, 0, size)
			for i := 0; i < size; i++ {
				var elem3 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem3 = temp
				}
				p.List4 = append(p.List4, elem3)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 16:
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			temp := make(map[string]string, size)
			p.AMap = &temp
			for i := 0; i < size; i++ {
				var elem4 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					elem4 = v
				}
				var elem5 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					elem5 = v
				}
				(*p.AMap)[elem4] = elem5
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
		case 17:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 17: ", err)
			} else {
				temp := HealthCondition(v)
				p.Status = temp
			}
			issetStatus = true
		case 18:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 18: ", err)
			} else {
				temp := golang.BaseHealthCondition(v)
				p.BaseStatus = temp
			}
			issetBaseStatus = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field 'Status' is not present in struct 'TestingDefaults'"))
	}
	if !issetBaseStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field 'BaseStatus' is not present in struct 'TestingDefaults'"))
	}
	return nil
}

func (p *TestingDefaults) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TestingDefaults"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetID2() {
		if err := frugal.WriteI64(oprot, int64(p.ID2), "ID2", 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::ID2:1 ", p), err)
		}
	}
	if err := frugal.WriteStruct(oprot, p.Ev1, "ev1", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ev1:2 ", p), err)
	}
	if err := frugal.WriteStruct(oprot, p.Ev2, "ev2", 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ev2:3 ", p), err)
	}
	if err := frugal.WriteI64(oprot, int64(p.ID), "ID", 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ID:4 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.Thing, "thing", 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::thing:5 ", p), err)
	}
	if p.IsSetThing2() {
		if err := frugal.WriteString(oprot, p.Thing2, "thing2", 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::thing2:6 ", p), err)
		}
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := frugal.WriteI64(oprot, int64(p.ID3), "ID3", 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ID3:8 ", p), err)
	}
	if err := frugal.WriteBinary(oprot, p.BinField, "bin_field", 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::bin_field:9 ", p), err)
	}
	if p.IsSetBinField2() {
		if err := frugal.WriteBinary(oprot, p.BinField2, "bin_field2", 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::bin_field2:10 ", p), err)
		}
	}
	if err := frugal.WriteBinary(oprot, p.BinField3, "bin_field3", 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::bin_field3:11 ", p), err)
	}
	if p.IsSetBinField4() {
		if err := frugal.WriteBinary(oprot, p.BinField4, "bin_field4", 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::bin_field4:12 ", p), err)
		}
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := frugal.WriteI32(oprot, int32(p.Status), "status", 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::status:17 ", p), err)
	}
	if err := frugal.WriteI32(oprot, int32(p.BaseStatus), "base_status", 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::base_status:18 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TestingDefaults) writeField7(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("listfield", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:listfield: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Listfield)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Listfield {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:listfield: ", p), err)
	}
	return nil
}

func (p *TestingDefaults) writeField13(oprot thrift.TProtocol) error {
	if p.IsSetList2() {
		if err := oprot.WriteFieldBegin("list2", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:list2: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(*p.List2)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range *p.List2 {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:list2: ", p), err)
		}
	}
	return nil
}

func (p *TestingDefaults) writeField14(oprot thrift.TProtocol) error {
	if p.IsSetList3() {
		if err := oprot.WriteFieldBegin("list3", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:list3: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.List3)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.List3 {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:list3: ", p), err)
		}
	}
	return nil
}

func (p *TestingDefaults) writeField15(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("list4", thrift.LIST, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:list4: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.List4)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.List4 {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:list4: ", p), err)
	}
	return nil
}

func (p *TestingDefaults) writeField16(oprot thrift.TProtocol) error {
	if p.IsSetAMap() {
		if err := oprot.WriteFieldBegin("a_map", thrift.MAP, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:a_map: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.AMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range *p.AMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:a_map: ", p), err)
		}
	}
	return nil
}

func (p *TestingDefaults) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestingDefaults(%+v)", *p)
}

type EventWrapper struct {
	ID               *ID
	Ev               *Event
	Events           []*Event
	Events2          map[*Event]bool
	EventMap         map[ID]*Event
	Nums             [][]Int
	Enums            []ItsAnEnum
	ABoolField       bool
	AUnion           *TestingUnions
	TypedefOfTypedef T2String
	// This is a docstring comment for a deprecated field that has been spread
	// across two lines.
	// Deprecated: use something else
	Depr bool
	// Deprecated: use something else
	DeprBinary []byte
	// Deprecated: use something else
	DeprList []bool
}

func NewEventWrapper() *EventWrapper {
	return &EventWrapper{}
}

var EventWrapper_ID_DEFAULT ID

func (p *EventWrapper) IsSetID() bool {
	return p.ID != nil
}

func (p *EventWrapper) GetID() ID {
	if !p.IsSetID() {
		return EventWrapper_ID_DEFAULT
	}
	return *p.ID
}

var EventWrapper_Ev_DEFAULT *Event

func (p *EventWrapper) IsSetEv() bool {
	return p.Ev != nil
}

func (p *EventWrapper) GetEv() *Event {
	if !p.IsSetEv() {
		return EventWrapper_Ev_DEFAULT
	}
	return p.Ev
}

func (p *EventWrapper) GetEvents() []*Event {
	return p.Events
}

func (p *EventWrapper) GetEvents2() map[*Event]bool {
	return p.Events2
}

func (p *EventWrapper) GetEventMap() map[ID]*Event {
	return p.EventMap
}

func (p *EventWrapper) GetNums() [][]Int {
	return p.Nums
}

func (p *EventWrapper) GetEnums() []ItsAnEnum {
	return p.Enums
}

func (p *EventWrapper) GetABoolField() bool {
	return p.ABoolField
}

var EventWrapper_AUnion_DEFAULT *TestingUnions

func (p *EventWrapper) IsSetAUnion() bool {
	return p.AUnion != nil
}

func (p *EventWrapper) GetAUnion() *TestingUnions {
	if !p.IsSetAUnion() {
		return EventWrapper_AUnion_DEFAULT
	}
	return p.AUnion
}

func (p *EventWrapper) GetTypedefOfTypedef() T2String {
	return p.TypedefOfTypedef
}

func (p *EventWrapper) GetDepr() bool {
	return p.Depr
}

func (p *EventWrapper) GetDeprBinary() []byte {
	return p.DeprBinary
}

func (p *EventWrapper) GetDeprList() []bool {
	return p.DeprList
}

func (p *EventWrapper) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	issetEv := false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.ID = &temp
			}
		case 2:
			p.Ev = NewEvent()
			if err := p.Ev.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ev), err)
			}
			issetEv = true
		case 3:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.Events = make([]*Event, 0, size)
			for i := 0; i < size; i++ {
				elem6 := NewEvent()
				if err := elem6.Read(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem6), err)
				}
				p.Events = append(p.Events, elem6)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 4:
			_, size, err := iprot.ReadSetBegin()
			if err != nil {
				return thrift.PrependError("error reading set begin: ", err)
			}
			p.Events2 = make(map[*Event]bool, size)
			for i := 0; i < size; i++ {
				elem7 := NewEvent()
				if err := elem7.Read(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem7), err)
				}
				(p.Events2)[elem7] = true
			}
			if err := iprot.ReadSetEnd(); err != nil {
				return thrift.PrependError("error reading set end: ", err)
			}
		case 5:
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			p.EventMap = make(map[ID]*Event, size)
			for i := 0; i < size; i++ {
				var elem8 ID
				if v, err := iprot.ReadI64(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := ID(v)
					elem8 = temp
				}
				elem9 := NewEvent()
				if err := elem9.Read(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem9), err)
				}
				(p.EventMap)[elem8] = elem9
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
		case 6:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.Nums = make([][]Int, 0, size)
			for i := 0; i < size; i++ {
				_, size, err := iprot.ReadListBegin()
				if err != nil {
					return thrift.PrependError("error reading list begin: ", err)
				}
				elem10 := make([]Int, 0, size)
				for i := 0; i < size; i++ {
					var elem11 Int
					if v, err := iprot.ReadI32(); err != nil {
						return thrift.PrependError("error reading field 0: ", err)
					} else {
						temp := Int(v)
						elem11 = temp
					}
					elem10 = append(elem10, elem11)
				}
				if err := iprot.ReadListEnd(); err != nil {
					return thrift.PrependError("error reading list end: ", err)
				}
				p.Nums = append(p.Nums, elem10)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 7:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.Enums = make([]ItsAnEnum, 0, size)
			for i := 0; i < size; i++ {
				var elem12 ItsAnEnum
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := ItsAnEnum(v)
					elem12 = temp
				}
				p.Enums = append(p.Enums, elem12)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 8:
			if v, err := iprot.ReadBool(); err != nil {
				return thrift.PrependError("error reading field 8: ", err)
			} else {
				p.ABoolField = v
			}
		case 9:
			p.AUnion = NewTestingUnions()
			if err := p.AUnion.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AUnion), err)
			}
		case 10:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 10: ", err)
			} else {
				temp := T2String(v)
				p.TypedefOfTypedef = temp
			}
		case 11:
			if v, err := iprot.ReadBool(); err != nil {
				return thrift.PrependError("error reading field 11: ", err)
			} else {
				p.Depr = v
			}
		case 12:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 12: ", err)
			} else {
				p.DeprBinary = v
			}
		case 13:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.DeprList = make([]bool, 0, size)
			for i := 0; i < size; i++ {
				var elem13 bool
				if v, err := iprot.ReadBool(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					elem13 = v
				}
				p.DeprList = append(p.DeprList, elem13)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEv {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field 'Ev' is not present in struct 'EventWrapper'"))
	}
	return nil
}

func (p *EventWrapper) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EventWrapper"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetID() {
		if err := frugal.WriteI64(oprot, int64(*p.ID), "ID", 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::ID:1 ", p), err)
		}
	}
	if err := frugal.WriteStruct(oprot, p.Ev, "Ev", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::Ev:2 ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := frugal.WriteBool(oprot, p.ABoolField, "aBoolField", 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::aBoolField:8 ", p), err)
	}
	if err := frugal.WriteStruct(oprot, p.AUnion, "a_union", 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::a_union:9 ", p), err)
	}
	if err := frugal.WriteString(oprot, string(p.TypedefOfTypedef), "typedefOfTypedef", 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::typedefOfTypedef:10 ", p), err)
	}
	if err := frugal.WriteBool(oprot, p.Depr, "depr", 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::depr:11 ", p), err)
	}
	if err := frugal.WriteBinary(oprot, p.DeprBinary, "deprBinary", 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::deprBinary:12 ", p), err)
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EventWrapper) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Events", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Events: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Events)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Events {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Events: ", p), err)
	}
	return nil
}

func (p *EventWrapper) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Events2", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Events2: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Events2)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Events2 {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Events2: ", p), err)
	}
	return nil
}

func (p *EventWrapper) writeField5(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("EventMap", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:EventMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.EventMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.EventMap {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:EventMap: ", p), err)
	}
	return nil
}

func (p *EventWrapper) writeField6(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Nums", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Nums: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Nums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nums {
		if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Nums: ", p), err)
	}
	return nil
}

func (p *EventWrapper) writeField7(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Enums", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Enums: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Enums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Enums {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Enums: ", p), err)
	}
	return nil
}

func (p *EventWrapper) writeField13(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("deprList", thrift.LIST, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:deprList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.DeprList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DeprList {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:deprList: ", p), err)
	}
	return nil
}

func (p *EventWrapper) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EventWrapper(%+v)", *p)
}

type FooArgs_ struct {
	NewMessage_    string
	MessageArgs_   string
	MessageResult_ string
}

func NewFooArgs_() *FooArgs_ {
	return &FooArgs_{}
}

func (p *FooArgs_) GetNewMessage_() string {
	return p.NewMessage_
}

func (p *FooArgs_) GetMessageArgs_() string {
	return p.MessageArgs_
}

func (p *FooArgs_) GetMessageResult_() string {
	return p.MessageResult_
}

func (p *FooArgs_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.NewMessage_ = v
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.MessageArgs_ = v
			}
		case 3:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 3: ", err)
			} else {
				p.MessageResult_ = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooArgs_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FooArgs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteString(oprot, p.NewMessage_, "newMessage", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::newMessage:1 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.MessageArgs_, "messageArgs", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::messageArgs:2 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.MessageResult_, "messageResult", 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::messageResult:3 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooArgs_(%+v)", *p)
}

type TestingUnions struct {
	AnID            *ID
	AString         *string
	Someotherthing  *Int
	AnInt16         *int16
	Requests        Request
	BinFieldInUnion []byte
	// Deprecated: use something else
	Depr *bool
}

func NewTestingUnions() *TestingUnions {
	return &TestingUnions{}
}

var TestingUnions_AnID_DEFAULT ID

func (p *TestingUnions) IsSetAnID() bool {
	return p.AnID != nil
}

func (p *TestingUnions) GetAnID() ID {
	if !p.IsSetAnID() {
		return TestingUnions_AnID_DEFAULT
	}
	return *p.AnID
}

var TestingUnions_AString_DEFAULT string

func (p *TestingUnions) IsSetAString() bool {
	return p.AString != nil
}

func (p *TestingUnions) GetAString() string {
	if !p.IsSetAString() {
		return TestingUnions_AString_DEFAULT
	}
	return *p.AString
}

var TestingUnions_Someotherthing_DEFAULT Int

func (p *TestingUnions) IsSetSomeotherthing() bool {
	return p.Someotherthing != nil
}

func (p *TestingUnions) GetSomeotherthing() Int {
	if !p.IsSetSomeotherthing() {
		return TestingUnions_Someotherthing_DEFAULT
	}
	return *p.Someotherthing
}

var TestingUnions_AnInt16_DEFAULT int16

func (p *TestingUnions) IsSetAnInt16() bool {
	return p.AnInt16 != nil
}

func (p *TestingUnions) GetAnInt16() int16 {
	if !p.IsSetAnInt16() {
		return TestingUnions_AnInt16_DEFAULT
	}
	return *p.AnInt16
}

var TestingUnions_Requests_DEFAULT Request

func (p *TestingUnions) IsSetRequests() bool {
	return p.Requests != nil
}

func (p *TestingUnions) GetRequests() Request {
	return p.Requests
}

var TestingUnions_BinFieldInUnion_DEFAULT []byte

func (p *TestingUnions) IsSetBinFieldInUnion() bool {
	return p.BinFieldInUnion != nil
}

func (p *TestingUnions) GetBinFieldInUnion() []byte {
	return p.BinFieldInUnion
}

var TestingUnions_Depr_DEFAULT bool

func (p *TestingUnions) IsSetDepr() bool {
	return p.Depr != nil
}

func (p *TestingUnions) GetDepr() bool {
	if !p.IsSetDepr() {
		return TestingUnions_Depr_DEFAULT
	}
	return *p.Depr
}

func (p *TestingUnions) CountSetFieldsTestingUnions() int {
	count := 0
	if p.IsSetAnID() {
		count++
	}
	if p.IsSetAString() {
		count++
	}
	if p.IsSetSomeotherthing() {
		count++
	}
	if p.IsSetAnInt16() {
		count++
	}
	if p.IsSetRequests() {
		count++
	}
	if p.IsSetBinFieldInUnion() {
		count++
	}
	if p.IsSetDepr() {
		count++
	}
	return count
}

func (p *TestingUnions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.AnID = &temp
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.AString = &v
			}
		case 3:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 3: ", err)
			} else {
				temp := Int(v)
				p.Someotherthing = &temp
			}
		case 4:
			if v, err := iprot.ReadI16(); err != nil {
				return thrift.PrependError("error reading field 4: ", err)
			} else {
				p.AnInt16 = &v
			}
		case 5:
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			p.Requests = make(Request, size)
			for i := 0; i < size; i++ {
				var elem14 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem14 = temp
				}
				var elem15 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					elem15 = v
				}
				(p.Requests)[elem14] = elem15
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
		case 6:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 6: ", err)
			} else {
				p.BinFieldInUnion = v
			}
		case 7:
			if v, err := iprot.ReadBool(); err != nil {
				return thrift.PrependError("error reading field 7: ", err)
			} else {
				p.Depr = &v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if c := p.CountSetFieldsTestingUnions(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T read union: exactly one field must be set (%d set).", p, c))
	}
	return nil
}

func (p *TestingUnions) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTestingUnions(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c))
	}
	if err := oprot.WriteStructBegin("TestingUnions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetAnID() {
		if err := frugal.WriteI64(oprot, int64(*p.AnID), "AnID", 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::AnID:1 ", p), err)
		}
	}
	if p.IsSetAString() {
		if err := frugal.WriteString(oprot, *p.AString, "aString", 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::aString:2 ", p), err)
		}
	}
	if p.IsSetSomeotherthing() {
		if err := frugal.WriteI32(oprot, int32(*p.Someotherthing), "someotherthing", 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::someotherthing:3 ", p), err)
		}
	}
	if p.IsSetAnInt16() {
		if err := frugal.WriteI16(oprot, *p.AnInt16, "AnInt16", 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::AnInt16:4 ", p), err)
		}
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if p.IsSetBinFieldInUnion() {
		if err := frugal.WriteBinary(oprot, p.BinFieldInUnion, "bin_field_in_union", 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::bin_field_in_union:6 ", p), err)
		}
	}
	if p.IsSetDepr() {
		if err := frugal.WriteBool(oprot, *p.Depr, "depr", 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::depr:7 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TestingUnions) writeField5(oprot thrift.TProtocol) error {
	if p.IsSetRequests() {
		if err := oprot.WriteFieldBegin("Requests", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Requests: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Requests)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Requests {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Requests: ", p), err)
		}
	}
	return nil
}

func (p *TestingUnions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestingUnions(%+v)", *p)
}

type AwesomeException struct {
	// ID is a unique identifier for an awesome exception.
	ID ID
	// Reason contains the error message.
	Reason string
	// Deprecated: use something else
	Depr bool
}

func NewAwesomeException() *AwesomeException {
	return &AwesomeException{}
}

func (p *AwesomeException) GetID() ID {
	return p.ID
}

func (p *AwesomeException) GetReason() string {
	return p.Reason
}

func (p *AwesomeException) GetDepr() bool {
	return p.Depr
}

func (p *AwesomeException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.ID = temp
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.Reason = v
			}
		case 3:
			if v, err := iprot.ReadBool(); err != nil {
				return thrift.PrependError("error reading field 3: ", err)
			} else {
				p.Depr = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AwesomeException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AwesomeException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI64(oprot, int64(p.ID), "ID", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::ID:1 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.Reason, "Reason", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::Reason:2 ", p), err)
	}
	if err := frugal.WriteBool(oprot, p.Depr, "depr", 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::depr:3 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AwesomeException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AwesomeException(%+v)", *p)
}

func (p *AwesomeException) Error() string {
	return p.String()
}
