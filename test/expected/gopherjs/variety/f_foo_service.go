// Autogenerated by Frugal Compiler (2.25.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package variety

import (
	"fmt"

	"github.com/Workiva/frugal/lib/gopherjs/frugal"
	"github.com/Workiva/frugal/lib/gopherjs/thrift"
	"github.com/Workiva/frugal/test/expected/gopherjs/ValidTypes"
	"github.com/Workiva/frugal/test/expected/gopherjs/actual_base/golang"
	"github.com/Workiva/frugal/test/expected/gopherjs/subdir_include"
	"github.com/Workiva/frugal/test/expected/gopherjs/validStructs"
)

// This is a thrift service. Frugal will generate bindings that include
// a frugal Context for each service call.
type FFoo interface {
	golang.FBaseFoo

	// Ping the server.
	// Deprecated: don't use this; use "something else"
	Ping(ctx frugal.FContext) (err error)
	// Blah the server.
	Blah(ctx frugal.FContext, num int32, Str string, event *Event) (r int64, err error)
	// oneway methods don't receive a response from the server.
	OneWay(ctx frugal.FContext, id ID, req Request) (err error)
	BinMethod(ctx frugal.FContext, bin []byte, Str string) (r []byte, err error)
	ParamModifiers(ctx frugal.FContext, opt_num int32, default_num int32, req_num int32) (r int64, err error)
	UnderlyingTypesTest(ctx frugal.FContext, list_type []ID, set_type map[ID]bool) (r []ID, err error)
	GetThing(ctx frugal.FContext) (r *validStructs.Thing, err error)
	GetMyInt(ctx frugal.FContext) (r ValidTypes.MyInt, err error)
	UseSubdirStruct(ctx frugal.FContext, a *subdir_include.A) (r *subdir_include.A, err error)
	SayHelloWith(ctx frugal.FContext, newMessage string) (r string, err error)
	WhatDoYouSay(ctx frugal.FContext, messageArgs string) (r string, err error)
	SayAgain(ctx frugal.FContext, messageResult string) (r string, err error)
}

// This is a thrift service. Frugal will generate bindings that include
// a frugal Context for each service call.
type FFooClient struct {
	*golang.FBaseFooClient
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	methods         map[string]*frugal.Method
}

func NewFFooClient(provider *frugal.FServiceProvider, middleware ...frugal.ServiceMiddleware) *FFooClient {
	methods := make(map[string]*frugal.Method)
	client := &FFooClient{
		FBaseFooClient:  golang.NewFBaseFooClient(provider, middleware...),
		transport:       provider.GetTransport(),
		protocolFactory: provider.GetProtocolFactory(),
		methods:         methods,
	}
	middleware = append(middleware, provider.GetMiddleware()...)
	methods["ping"] = frugal.NewMethod(client, client.ping, "ping", middleware)
	methods["blah"] = frugal.NewMethod(client, client.blah, "blah", middleware)
	methods["oneWay"] = frugal.NewMethod(client, client.oneWay, "oneWay", middleware)
	methods["bin_method"] = frugal.NewMethod(client, client.bin_method, "bin_method", middleware)
	methods["param_modifiers"] = frugal.NewMethod(client, client.param_modifiers, "param_modifiers", middleware)
	methods["underlying_types_test"] = frugal.NewMethod(client, client.underlying_types_test, "underlying_types_test", middleware)
	methods["getThing"] = frugal.NewMethod(client, client.getThing, "getThing", middleware)
	methods["getMyInt"] = frugal.NewMethod(client, client.getMyInt, "getMyInt", middleware)
	methods["use_subdir_struct"] = frugal.NewMethod(client, client.use_subdir_struct, "use_subdir_struct", middleware)
	methods["sayHelloWith"] = frugal.NewMethod(client, client.sayHelloWith, "sayHelloWith", middleware)
	methods["whatDoYouSay"] = frugal.NewMethod(client, client.whatDoYouSay, "whatDoYouSay", middleware)
	methods["sayAgain"] = frugal.NewMethod(client, client.sayAgain, "sayAgain", middleware)
	return client
}

// Ping the server.
// Deprecated: don't use this; use "something else"
func (f *FFooClient) Ping(ctx frugal.FContext) (err error) {
	ret := f.methods["ping"].Invoke([]interface{}{ctx})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err = ret[0].(error)
	}
	return err
}

func (f *FFooClient) ping(ctx frugal.FContext) (err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, 0); err != nil {
		return
	}
	args := FooPingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "ping failed: invalid message type")
		return
	}
	result := FooPingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Blah the server.
func (f *FFooClient) Blah(ctx frugal.FContext, num int32, str string, event *Event) (r int64, err error) {
	ret := f.methods["blah"].Invoke([]interface{}{ctx, num, str, event})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(int64)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) blah(ctx frugal.FContext, num int32, str string, event *Event) (r int64, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("blah", thrift.CALL, 0); err != nil {
		return
	}
	args := FooBlahArgs{
		Num:   num,
		Str:   str,
		Event: event,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "blah" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "blah failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "blah failed: invalid message type")
		return
	}
	result := FooBlahResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Awe != nil {
		err = result.Awe
		return
	}
	if result.API != nil {
		err = result.API
		return
	}
	r = result.GetSuccess()
	return
}

// oneway methods don't receive a response from the server.
func (f *FFooClient) OneWay(ctx frugal.FContext, id ID, req Request) (err error) {
	ret := f.methods["oneWay"].Invoke([]interface{}{ctx, id, req})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err = ret[0].(error)
	}
	return err
}

func (f *FFooClient) oneWay(ctx frugal.FContext, id ID, req Request) (err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("oneWay", thrift.ONEWAY, 0); err != nil {
		return
	}
	args := FooOneWayArgs{
		ID:  id,
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	err = f.transport.Oneway(ctx, buffer.Bytes())
	return
}

func (f *FFooClient) BinMethod(ctx frugal.FContext, bin []byte, str string) (r []byte, err error) {
	ret := f.methods["bin_method"].Invoke([]interface{}{ctx, bin, str})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].([]byte)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) bin_method(ctx frugal.FContext, bin []byte, str string) (r []byte, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("bin_method", thrift.CALL, 0); err != nil {
		return
	}
	args := FooBinMethodArgs{
		Bin: bin,
		Str: str,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bin_method" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "bin_method failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "bin_method failed: invalid message type")
		return
	}
	result := FooBinMethodResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.API != nil {
		err = result.API
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) ParamModifiers(ctx frugal.FContext, opt_num int32, default_num int32, req_num int32) (r int64, err error) {
	ret := f.methods["param_modifiers"].Invoke([]interface{}{ctx, opt_num, default_num, req_num})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(int64)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) param_modifiers(ctx frugal.FContext, opt_num int32, default_num int32, req_num int32) (r int64, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("param_modifiers", thrift.CALL, 0); err != nil {
		return
	}
	args := FooParamModifiersArgs{
		OptNum:     opt_num,
		DefaultNum: default_num,
		ReqNum:     req_num,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "param_modifiers" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "param_modifiers failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "param_modifiers failed: invalid message type")
		return
	}
	result := FooParamModifiersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) UnderlyingTypesTest(ctx frugal.FContext, list_type []ID, set_type map[ID]bool) (r []ID, err error) {
	ret := f.methods["underlying_types_test"].Invoke([]interface{}{ctx, list_type, set_type})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].([]ID)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) underlying_types_test(ctx frugal.FContext, list_type []ID, set_type map[ID]bool) (r []ID, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("underlying_types_test", thrift.CALL, 0); err != nil {
		return
	}
	args := FooUnderlyingTypesTestArgs{
		ListType: list_type,
		SetType:  set_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "underlying_types_test" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "underlying_types_test failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "underlying_types_test failed: invalid message type")
		return
	}
	result := FooUnderlyingTypesTestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) GetThing(ctx frugal.FContext) (r *validStructs.Thing, err error) {
	ret := f.methods["getThing"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(*validStructs.Thing)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) getThing(ctx frugal.FContext) (r *validStructs.Thing, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("getThing", thrift.CALL, 0); err != nil {
		return
	}
	args := FooGetThingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getThing" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "getThing failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "getThing failed: invalid message type")
		return
	}
	result := FooGetThingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) GetMyInt(ctx frugal.FContext) (r ValidTypes.MyInt, err error) {
	ret := f.methods["getMyInt"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(ValidTypes.MyInt)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) getMyInt(ctx frugal.FContext) (r ValidTypes.MyInt, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("getMyInt", thrift.CALL, 0); err != nil {
		return
	}
	args := FooGetMyIntArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getMyInt" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "getMyInt failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "getMyInt failed: invalid message type")
		return
	}
	result := FooGetMyIntResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) UseSubdirStruct(ctx frugal.FContext, a *subdir_include.A) (r *subdir_include.A, err error) {
	ret := f.methods["use_subdir_struct"].Invoke([]interface{}{ctx, a})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(*subdir_include.A)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) use_subdir_struct(ctx frugal.FContext, a *subdir_include.A) (r *subdir_include.A, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("use_subdir_struct", thrift.CALL, 0); err != nil {
		return
	}
	args := FooUseSubdirStructArgs{
		A: a,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "use_subdir_struct" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "use_subdir_struct failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "use_subdir_struct failed: invalid message type")
		return
	}
	result := FooUseSubdirStructResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) SayHelloWith(ctx frugal.FContext, newmessage string) (r string, err error) {
	ret := f.methods["sayHelloWith"].Invoke([]interface{}{ctx, newmessage})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(string)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) sayHelloWith(ctx frugal.FContext, newmessage string) (r string, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("sayHelloWith", thrift.CALL, 0); err != nil {
		return
	}
	args := FooSayHelloWithArgs{
		NewMessage_: newmessage,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sayHelloWith" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "sayHelloWith failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "sayHelloWith failed: invalid message type")
		return
	}
	result := FooSayHelloWithResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) WhatDoYouSay(ctx frugal.FContext, messageargs string) (r string, err error) {
	ret := f.methods["whatDoYouSay"].Invoke([]interface{}{ctx, messageargs})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(string)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) whatDoYouSay(ctx frugal.FContext, messageargs string) (r string, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("whatDoYouSay", thrift.CALL, 0); err != nil {
		return
	}
	args := FooWhatDoYouSayArgs{
		MessageArgs_: messageargs,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "whatDoYouSay" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "whatDoYouSay failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "whatDoYouSay failed: invalid message type")
		return
	}
	result := FooWhatDoYouSayResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) SayAgain(ctx frugal.FContext, messageresult string) (r string, err error) {
	ret := f.methods["sayAgain"].Invoke([]interface{}{ctx, messageresult})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(string)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FFooClient) sayAgain(ctx frugal.FContext, messageresult string) (r string, err error) {
	buffer := frugal.NewTMemoryOutputBuffer(f.transport.GetRequestSizeLimit())
	oprot := f.protocolFactory.GetProtocol(buffer)
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		return
	}
	if err = oprot.WriteMessageBegin("sayAgain", thrift.CALL, 0); err != nil {
		return
	}
	args := FooSayAgainArgs{
		MessageResult_: messageresult,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	if err = oprot.Flush(); err != nil {
		return
	}
	var resultTransport thrift.TTransport
	resultTransport, err = f.transport.Request(ctx, buffer.Bytes())
	if err != nil {
		return
	}
	iprot := f.protocolFactory.GetProtocol(resultTransport)
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sayAgain" {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_WRONG_METHOD_NAME, "sayAgain failed: wrong method name")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN, "Unknown Exception")
		var error1 thrift.TApplicationException
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		if error1.TypeId() == frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE {
			err = thrift.NewTTransportException(frugal.TRANSPORT_EXCEPTION_RESPONSE_TOO_LARGE, error1.Error())
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_INVALID_MESSAGE_TYPE, "sayAgain failed: invalid message type")
		return
	}
	result := FooSayAgainResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	r = result.GetSuccess()
	return
}

type FFooProcessor struct {
	*golang.FBaseFooProcessor
}

func NewFFooProcessor(handler FFoo, middleware ...frugal.ServiceMiddleware) *FFooProcessor {
	p := &FFooProcessor{golang.NewFBaseFooProcessor(handler, middleware...)}
	p.AddToProcessorMap("ping", &fooFPing{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.Ping, "Ping", middleware))})
	p.AddToAnnotationsMap("ping", map[string]string{
		"deprecated": "don't use this; use \"something else\"",
	})
	p.AddToProcessorMap("blah", &fooFBlah{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.Blah, "Blah", middleware))})
	p.AddToProcessorMap("oneWay", &fooFOneWay{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.OneWay, "OneWay", middleware))})
	p.AddToProcessorMap("bin_method", &fooFBinMethod{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.BinMethod, "BinMethod", middleware))})
	p.AddToProcessorMap("param_modifiers", &fooFParamModifiers{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.ParamModifiers, "ParamModifiers", middleware))})
	p.AddToProcessorMap("underlying_types_test", &fooFUnderlyingTypesTest{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.UnderlyingTypesTest, "UnderlyingTypesTest", middleware))})
	p.AddToProcessorMap("getThing", &fooFGetThing{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.GetThing, "GetThing", middleware))})
	p.AddToProcessorMap("getMyInt", &fooFGetMyInt{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.GetMyInt, "GetMyInt", middleware))})
	p.AddToProcessorMap("use_subdir_struct", &fooFUseSubdirStruct{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.UseSubdirStruct, "UseSubdirStruct", middleware))})
	p.AddToProcessorMap("sayHelloWith", &fooFSayHelloWith{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.SayHelloWith, "SayHelloWith", middleware))})
	p.AddToProcessorMap("whatDoYouSay", &fooFWhatDoYouSay{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.WhatDoYouSay, "WhatDoYouSay", middleware))})
	p.AddToProcessorMap("sayAgain", &fooFSayAgain{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.SayAgain, "SayAgain", middleware))})
	return p
}

type fooFPing struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFPing) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooPingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "ping", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooPingResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err2 = ret[0].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("ping", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "ping", "Internal error processing ping: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "ping", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "ping", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "ping", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "ping", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "ping", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFBlah struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFBlah) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooBlahArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "blah", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooBlahResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.Num, args.Str, args.Event})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("blah", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		switch v := err2.(type) {
		case *AwesomeException:
			result.Awe = v
		case *golang.APIException:
			result.API = v
		default:
			p.GetWriteMutex().Lock()
			err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "blah", "Internal error processing blah: "+err2.Error())
			p.GetWriteMutex().Unlock()
			return err2
		}
	} else {
		var retval int64 = ret[0].(int64)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "blah", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("blah", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "blah", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "blah", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "blah", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "blah", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFOneWay struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFOneWay) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooOneWayArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return err
	}

	iprot.ReadMessageEnd()
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.ID, args.Req})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err2 = ret[0].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("oneWay", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		return err2
	}
	return err
}

type fooFBinMethod struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFBinMethod) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooBinMethodArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "bin_method", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooBinMethodResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.Bin, args.Str})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("bin_method", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		switch v := err2.(type) {
		case *golang.APIException:
			result.API = v
		default:
			p.GetWriteMutex().Lock()
			err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "bin_method", "Internal error processing bin_method: "+err2.Error())
			p.GetWriteMutex().Unlock()
			return err2
		}
	} else {
		var retval []byte = ret[0].([]byte)
		result.Success = retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "bin_method", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("bin_method", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "bin_method", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "bin_method", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "bin_method", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "bin_method", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFParamModifiers struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFParamModifiers) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooParamModifiersArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "param_modifiers", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooParamModifiersResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.OptNum, args.DefaultNum, args.ReqNum})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("param_modifiers", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "param_modifiers", "Internal error processing param_modifiers: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval int64 = ret[0].(int64)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "param_modifiers", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("param_modifiers", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "param_modifiers", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "param_modifiers", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "param_modifiers", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "param_modifiers", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFUnderlyingTypesTest struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFUnderlyingTypesTest) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooUnderlyingTypesTestArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "underlying_types_test", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooUnderlyingTypesTestResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.ListType, args.SetType})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("underlying_types_test", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "underlying_types_test", "Internal error processing underlying_types_test: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval []ID = ret[0].([]ID)
		result.Success = retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "underlying_types_test", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("underlying_types_test", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "underlying_types_test", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "underlying_types_test", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "underlying_types_test", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "underlying_types_test", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFGetThing struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFGetThing) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooGetThingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "getThing", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooGetThingResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("getThing", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "getThing", "Internal error processing getThing: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval *validStructs.Thing = ret[0].(*validStructs.Thing)
		result.Success = retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getThing", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getThing", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getThing", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getThing", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getThing", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getThing", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFGetMyInt struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFGetMyInt) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooGetMyIntArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "getMyInt", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooGetMyIntResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("getMyInt", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "getMyInt", "Internal error processing getMyInt: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval ValidTypes.MyInt = ret[0].(ValidTypes.MyInt)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getMyInt", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getMyInt", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getMyInt", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getMyInt", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getMyInt", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "getMyInt", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFUseSubdirStruct struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFUseSubdirStruct) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooUseSubdirStructArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "use_subdir_struct", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooUseSubdirStructResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.A})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("use_subdir_struct", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "use_subdir_struct", "Internal error processing use_subdir_struct: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval *subdir_include.A = ret[0].(*subdir_include.A)
		result.Success = retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "use_subdir_struct", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("use_subdir_struct", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "use_subdir_struct", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "use_subdir_struct", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "use_subdir_struct", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "use_subdir_struct", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFSayHelloWith struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFSayHelloWith) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooSayHelloWithArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "sayHelloWith", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooSayHelloWithResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.NewMessage_})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("sayHelloWith", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "sayHelloWith", "Internal error processing sayHelloWith: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval string = ret[0].(string)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayHelloWith", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("sayHelloWith", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayHelloWith", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayHelloWith", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayHelloWith", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayHelloWith", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFWhatDoYouSay struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFWhatDoYouSay) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooWhatDoYouSayArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "whatDoYouSay", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooWhatDoYouSayResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.MessageArgs_})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("whatDoYouSay", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "whatDoYouSay", "Internal error processing whatDoYouSay: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval string = ret[0].(string)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "whatDoYouSay", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("whatDoYouSay", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "whatDoYouSay", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "whatDoYouSay", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "whatDoYouSay", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "whatDoYouSay", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type fooFSayAgain struct {
	*frugal.FBaseProcessorFunction
}

func (p *fooFSayAgain) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooSayAgainArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		err = fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "sayAgain", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooSayAgainResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx, args.MessageResult_})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err3, ok := err2.(thrift.TApplicationException); ok {
			p.GetWriteMutex().Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("sayAgain", thrift.EXCEPTION, 0)
			err3.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.GetWriteMutex().Unlock()
			return nil
		}
		p.GetWriteMutex().Lock()
		err2 := fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "sayAgain", "Internal error processing sayAgain: "+err2.Error())
		p.GetWriteMutex().Unlock()
		return err2
	} else {
		var retval string = ret[0].(string)
		result.Success = &retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayAgain", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("sayAgain", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayAgain", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayAgain", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayAgain", err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			fooWriteApplicationError(ctx, oprot, frugal.APPLICATION_EXCEPTION_RESPONSE_TOO_LARGE, "sayAgain", err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

func fooWriteApplicationError(ctx frugal.FContext, oprot *frugal.FProtocol, type_ int32, method, message string) error {
	x := thrift.NewTApplicationException(type_, message)
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(method, thrift.EXCEPTION, 0)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return x
}

type FooPingArgs struct {
}

func NewFooPingArgs() *FooPingArgs {
	return &FooPingArgs{}
}

func (p *FooPingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooPingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooPingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooPingArgs(%+v)", *p)
}

type FooPingResult struct {
}

func NewFooPingResult() *FooPingResult {
	return &FooPingResult{}
}

func (p *FooPingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooPingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooPingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooPingResult(%+v)", *p)
}

type FooBlahArgs struct {
	Num   int32
	Str   string
	Event *Event
}

func NewFooBlahArgs() *FooBlahArgs {
	return &FooBlahArgs{}
}

func (p *FooBlahArgs) GetNum() int32 {
	return p.Num
}

func (p *FooBlahArgs) GetStr() string {
	return p.Str
}

var FooBlahArgs_Event_DEFAULT *Event

func (p *FooBlahArgs) IsSetEvent() bool {
	return p.Event != nil
}

func (p *FooBlahArgs) GetEvent() *Event {
	if !p.IsSetEvent() {
		return FooBlahArgs_Event_DEFAULT
	}
	return p.Event
}

func (p *FooBlahArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.Num = v
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.Str = v
			}
		case 3:
			p.Event = NewEvent()
			if err := p.Event.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Event), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooBlahArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blah_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI32(oprot, p.Num, "num", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::num:1 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.Str, "Str", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::Str:2 ", p), err)
	}
	if err := frugal.WriteStruct(oprot, p.Event, "event", 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::event:3 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooBlahArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooBlahArgs(%+v)", *p)
}

type FooBlahResult struct {
	Success *int64
	Awe     *AwesomeException
	API     *golang.APIException
}

func NewFooBlahResult() *FooBlahResult {
	return &FooBlahResult{}
}

var FooBlahResult_Success_DEFAULT int64

func (p *FooBlahResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooBlahResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FooBlahResult_Success_DEFAULT
	}
	return *p.Success
}

var FooBlahResult_Awe_DEFAULT *AwesomeException

func (p *FooBlahResult) IsSetAwe() bool {
	return p.Awe != nil
}

func (p *FooBlahResult) GetAwe() *AwesomeException {
	if !p.IsSetAwe() {
		return FooBlahResult_Awe_DEFAULT
	}
	return p.Awe
}

var FooBlahResult_API_DEFAULT *golang.APIException

func (p *FooBlahResult) IsSetAPI() bool {
	return p.API != nil
}

func (p *FooBlahResult) GetAPI() *golang.APIException {
	if !p.IsSetAPI() {
		return FooBlahResult_API_DEFAULT
	}
	return p.API
}

func (p *FooBlahResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = &v
			}
		case 1:
			p.Awe = NewAwesomeException()
			if err := p.Awe.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Awe), err)
			}
		case 2:
			p.API = golang.NewAPIException()
			if err := p.API.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.API), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooBlahResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("blah_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteI64(oprot, *p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if p.IsSetAwe() {
		if err := frugal.WriteStruct(oprot, p.Awe, "awe", 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::awe:1 ", p), err)
		}
	}
	if p.IsSetAPI() {
		if err := frugal.WriteStruct(oprot, p.API, "api", 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::api:2 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooBlahResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooBlahResult(%+v)", *p)
}

type FooOneWayArgs struct {
	ID  ID
	Req Request
}

func NewFooOneWayArgs() *FooOneWayArgs {
	return &FooOneWayArgs{}
}

func (p *FooOneWayArgs) GetID() ID {
	return p.ID
}

func (p *FooOneWayArgs) GetReq() Request {
	return p.Req
}

func (p *FooOneWayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				temp := ID(v)
				p.ID = temp
			}
		case 2:
			_, _, size, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.PrependError("error reading map begin: ", err)
			}
			p.Req = make(Request, size)
			for i := 0; i < size; i++ {
				var elem16 Int
				if v, err := iprot.ReadI32(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := Int(v)
					elem16 = temp
				}
				var elem17 string
				if v, err := iprot.ReadString(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					elem17 = v
				}
				(p.Req)[elem16] = elem17
			}
			if err := iprot.ReadMapEnd(); err != nil {
				return thrift.PrependError("error reading map end: ", err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooOneWayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("oneWay_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI64(oprot, int64(p.ID), "id", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::id:1 ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooOneWayArgs) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("req", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Req)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Req {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err)
	}
	return nil
}

func (p *FooOneWayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooOneWayArgs(%+v)", *p)
}

type FooBinMethodArgs struct {
	Bin []byte
	Str string
}

func NewFooBinMethodArgs() *FooBinMethodArgs {
	return &FooBinMethodArgs{}
}

func (p *FooBinMethodArgs) GetBin() []byte {
	return p.Bin
}

func (p *FooBinMethodArgs) GetStr() string {
	return p.Str
}

func (p *FooBinMethodArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.Bin = v
			}
		case 2:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.Str = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooBinMethodArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bin_method_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteBinary(oprot, p.Bin, "bin", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::bin:1 ", p), err)
	}
	if err := frugal.WriteString(oprot, p.Str, "Str", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::Str:2 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooBinMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooBinMethodArgs(%+v)", *p)
}

type FooBinMethodResult struct {
	Success []byte
	API     *golang.APIException
}

func NewFooBinMethodResult() *FooBinMethodResult {
	return &FooBinMethodResult{}
}

var FooBinMethodResult_Success_DEFAULT []byte

func (p *FooBinMethodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooBinMethodResult) GetSuccess() []byte {
	return p.Success
}

var FooBinMethodResult_API_DEFAULT *golang.APIException

func (p *FooBinMethodResult) IsSetAPI() bool {
	return p.API != nil
}

func (p *FooBinMethodResult) GetAPI() *golang.APIException {
	if !p.IsSetAPI() {
		return FooBinMethodResult_API_DEFAULT
	}
	return p.API
}

func (p *FooBinMethodResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadBinary(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = v
			}
		case 1:
			p.API = golang.NewAPIException()
			if err := p.API.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.API), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooBinMethodResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bin_method_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteBinary(oprot, p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if p.IsSetAPI() {
		if err := frugal.WriteStruct(oprot, p.API, "api", 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::api:1 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooBinMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooBinMethodResult(%+v)", *p)
}

type FooParamModifiersArgs struct {
	OptNum     int32
	DefaultNum int32
	ReqNum     int32
}

func NewFooParamModifiersArgs() *FooParamModifiersArgs {
	return &FooParamModifiersArgs{}
}

func (p *FooParamModifiersArgs) GetOptNum() int32 {
	return p.OptNum
}

func (p *FooParamModifiersArgs) GetDefaultNum() int32 {
	return p.DefaultNum
}

func (p *FooParamModifiersArgs) GetReqNum() int32 {
	return p.ReqNum
}

func (p *FooParamModifiersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	issetReqNum := false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.OptNum = v
			}
		case 2:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 2: ", err)
			} else {
				p.DefaultNum = v
			}
		case 3:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 3: ", err)
			} else {
				p.ReqNum = v
			}
			issetReqNum = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetReqNum {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field 'ReqNum' is not present in struct 'param_modifiers_args'"))
	}
	return nil
}

func (p *FooParamModifiersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("param_modifiers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteI32(oprot, p.OptNum, "opt_num", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::opt_num:1 ", p), err)
	}
	if err := frugal.WriteI32(oprot, p.DefaultNum, "default_num", 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::default_num:2 ", p), err)
	}
	if err := frugal.WriteI32(oprot, p.ReqNum, "req_num", 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::req_num:3 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooParamModifiersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooParamModifiersArgs(%+v)", *p)
}

type FooParamModifiersResult struct {
	Success *int64
}

func NewFooParamModifiersResult() *FooParamModifiersResult {
	return &FooParamModifiersResult{}
}

var FooParamModifiersResult_Success_DEFAULT int64

func (p *FooParamModifiersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooParamModifiersResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FooParamModifiersResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *FooParamModifiersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = &v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooParamModifiersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("param_modifiers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteI64(oprot, *p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooParamModifiersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooParamModifiersResult(%+v)", *p)
}

type FooUnderlyingTypesTestArgs struct {
	ListType []ID
	SetType  map[ID]bool
}

func NewFooUnderlyingTypesTestArgs() *FooUnderlyingTypesTestArgs {
	return &FooUnderlyingTypesTestArgs{}
}

func (p *FooUnderlyingTypesTestArgs) GetListType() []ID {
	return p.ListType
}

func (p *FooUnderlyingTypesTestArgs) GetSetType() map[ID]bool {
	return p.SetType
}

func (p *FooUnderlyingTypesTestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.ListType = make([]ID, 0, size)
			for i := 0; i < size; i++ {
				var elem18 ID
				if v, err := iprot.ReadI64(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := ID(v)
					elem18 = temp
				}
				p.ListType = append(p.ListType, elem18)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		case 2:
			_, size, err := iprot.ReadSetBegin()
			if err != nil {
				return thrift.PrependError("error reading set begin: ", err)
			}
			p.SetType = make(map[ID]bool, size)
			for i := 0; i < size; i++ {
				var elem19 ID
				if v, err := iprot.ReadI64(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := ID(v)
					elem19 = temp
				}
				(p.SetType)[elem19] = true
			}
			if err := iprot.ReadSetEnd(); err != nil {
				return thrift.PrependError("error reading set end: ", err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("underlying_types_test_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestArgs) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("list_type", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:list_type: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ListType)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ListType {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:list_type: ", p), err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestArgs) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("set_type", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:set_type: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.SetType)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.SetType {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:set_type: ", p), err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooUnderlyingTypesTestArgs(%+v)", *p)
}

type FooUnderlyingTypesTestResult struct {
	Success []ID
}

func NewFooUnderlyingTypesTestResult() *FooUnderlyingTypesTestResult {
	return &FooUnderlyingTypesTestResult{}
}

var FooUnderlyingTypesTestResult_Success_DEFAULT []ID

func (p *FooUnderlyingTypesTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooUnderlyingTypesTestResult) GetSuccess() []ID {
	return p.Success
}

func (p *FooUnderlyingTypesTestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			p.Success = make([]ID, 0, size)
			for i := 0; i < size; i++ {
				var elem20 ID
				if v, err := iprot.ReadI64(); err != nil {
					return thrift.PrependError("error reading field 0: ", err)
				} else {
					temp := ID(v)
					elem20 = temp
				}
				p.Success = append(p.Success, elem20)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("underlying_types_test_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooUnderlyingTypesTestResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *FooUnderlyingTypesTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooUnderlyingTypesTestResult(%+v)", *p)
}

type FooGetThingArgs struct {
}

func NewFooGetThingArgs() *FooGetThingArgs {
	return &FooGetThingArgs{}
}

func (p *FooGetThingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooGetThingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThing_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooGetThingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooGetThingArgs(%+v)", *p)
}

type FooGetThingResult struct {
	Success *validStructs.Thing
}

func NewFooGetThingResult() *FooGetThingResult {
	return &FooGetThingResult{}
}

var FooGetThingResult_Success_DEFAULT *validStructs.Thing

func (p *FooGetThingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooGetThingResult) GetSuccess() *validStructs.Thing {
	if !p.IsSetSuccess() {
		return FooGetThingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FooGetThingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			p.Success = validStructs.NewThing()
			if err := p.Success.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooGetThingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThing_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteStruct(oprot, p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooGetThingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooGetThingResult(%+v)", *p)
}

type FooGetMyIntArgs struct {
}

func NewFooGetMyIntArgs() *FooGetMyIntArgs {
	return &FooGetMyIntArgs{}
}

func (p *FooGetMyIntArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooGetMyIntArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMyInt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooGetMyIntArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooGetMyIntArgs(%+v)", *p)
}

type FooGetMyIntResult struct {
	Success *ValidTypes.MyInt
}

func NewFooGetMyIntResult() *FooGetMyIntResult {
	return &FooGetMyIntResult{}
}

var FooGetMyIntResult_Success_DEFAULT ValidTypes.MyInt

func (p *FooGetMyIntResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooGetMyIntResult) GetSuccess() ValidTypes.MyInt {
	if !p.IsSetSuccess() {
		return FooGetMyIntResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *FooGetMyIntResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := ValidTypes.MyInt(v)
				p.Success = &temp
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooGetMyIntResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMyInt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteI32(oprot, int32(*p.Success), "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooGetMyIntResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooGetMyIntResult(%+v)", *p)
}

type FooUseSubdirStructArgs struct {
	A *subdir_include.A
}

func NewFooUseSubdirStructArgs() *FooUseSubdirStructArgs {
	return &FooUseSubdirStructArgs{}
}

var FooUseSubdirStructArgs_A_DEFAULT *subdir_include.A

func (p *FooUseSubdirStructArgs) IsSetA() bool {
	return p.A != nil
}

func (p *FooUseSubdirStructArgs) GetA() *subdir_include.A {
	if !p.IsSetA() {
		return FooUseSubdirStructArgs_A_DEFAULT
	}
	return p.A
}

func (p *FooUseSubdirStructArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			p.A = subdir_include.NewA()
			if err := p.A.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.A), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooUseSubdirStructArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("use_subdir_struct_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteStruct(oprot, p.A, "a", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::a:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooUseSubdirStructArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooUseSubdirStructArgs(%+v)", *p)
}

type FooUseSubdirStructResult struct {
	Success *subdir_include.A
}

func NewFooUseSubdirStructResult() *FooUseSubdirStructResult {
	return &FooUseSubdirStructResult{}
}

var FooUseSubdirStructResult_Success_DEFAULT *subdir_include.A

func (p *FooUseSubdirStructResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooUseSubdirStructResult) GetSuccess() *subdir_include.A {
	if !p.IsSetSuccess() {
		return FooUseSubdirStructResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FooUseSubdirStructResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			p.Success = subdir_include.NewA()
			if err := p.Success.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooUseSubdirStructResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("use_subdir_struct_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteStruct(oprot, p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooUseSubdirStructResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooUseSubdirStructResult(%+v)", *p)
}

type FooSayHelloWithArgs struct {
	NewMessage_ string
}

func NewFooSayHelloWithArgs() *FooSayHelloWithArgs {
	return &FooSayHelloWithArgs{}
}

func (p *FooSayHelloWithArgs) GetNewMessage_() string {
	return p.NewMessage_
}

func (p *FooSayHelloWithArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.NewMessage_ = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooSayHelloWithArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sayHelloWith_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteString(oprot, p.NewMessage_, "newMessage", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::newMessage:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooSayHelloWithArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooSayHelloWithArgs(%+v)", *p)
}

type FooSayHelloWithResult struct {
	Success *string
}

func NewFooSayHelloWithResult() *FooSayHelloWithResult {
	return &FooSayHelloWithResult{}
}

var FooSayHelloWithResult_Success_DEFAULT string

func (p *FooSayHelloWithResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooSayHelloWithResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FooSayHelloWithResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *FooSayHelloWithResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = &v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooSayHelloWithResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sayHelloWith_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteString(oprot, *p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooSayHelloWithResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooSayHelloWithResult(%+v)", *p)
}

type FooWhatDoYouSayArgs struct {
	MessageArgs_ string
}

func NewFooWhatDoYouSayArgs() *FooWhatDoYouSayArgs {
	return &FooWhatDoYouSayArgs{}
}

func (p *FooWhatDoYouSayArgs) GetMessageArgs_() string {
	return p.MessageArgs_
}

func (p *FooWhatDoYouSayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.MessageArgs_ = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooWhatDoYouSayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("whatDoYouSay_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteString(oprot, p.MessageArgs_, "messageArgs", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::messageArgs:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooWhatDoYouSayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooWhatDoYouSayArgs(%+v)", *p)
}

type FooWhatDoYouSayResult struct {
	Success *string
}

func NewFooWhatDoYouSayResult() *FooWhatDoYouSayResult {
	return &FooWhatDoYouSayResult{}
}

var FooWhatDoYouSayResult_Success_DEFAULT string

func (p *FooWhatDoYouSayResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooWhatDoYouSayResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FooWhatDoYouSayResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *FooWhatDoYouSayResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = &v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooWhatDoYouSayResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("whatDoYouSay_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteString(oprot, *p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooWhatDoYouSayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooWhatDoYouSayResult(%+v)", *p)
}

type FooSayAgainArgs struct {
	MessageResult_ string
}

func NewFooSayAgainArgs() *FooSayAgainArgs {
	return &FooSayAgainArgs{}
}

func (p *FooSayAgainArgs) GetMessageResult_() string {
	return p.MessageResult_
}

func (p *FooSayAgainArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 1: ", err)
			} else {
				p.MessageResult_ = v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooSayAgainArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sayAgain_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := frugal.WriteString(oprot, p.MessageResult_, "messageResult", 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T::messageResult:1 ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooSayAgainArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooSayAgainArgs(%+v)", *p)
}

type FooSayAgainResult struct {
	Success *string
}

func NewFooSayAgainResult() *FooSayAgainResult {
	return &FooSayAgainResult{}
}

var FooSayAgainResult_Success_DEFAULT string

func (p *FooSayAgainResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FooSayAgainResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FooSayAgainResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *FooSayAgainResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				p.Success = &v
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FooSayAgainResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sayAgain_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p.IsSetSuccess() {
		if err := frugal.WriteString(oprot, *p.Success, "success", 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T::success:0 ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FooSayAgainResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FooSayAgainResult(%+v)", *p)
}
